/* Generated by Cython 0.29.35 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "TRANS_START", 
                99
            ]
        ], 
        "depends": [], 
        "include_dirs": [
            "./mmfparser/player"
        ], 
        "language": "c++", 
        "name": "mmfparser.data.chunkloaders.imagebank", 
        "sources": [
            "./mmfparser/data/chunkloaders/imagebank.pyx"
        ]
    }, 
    "module_name": "mmfparser.data.chunkloaders.imagebank"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_35"
#define CYTHON_HEX_VERSION 0x001D23F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mmfparser__data__chunkloaders__imagebank
#define __PYX_HAVE_API__mmfparser__data__chunkloaders__imagebank
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmfparser/data/chunkloaders/imagebank.pyx",
  "stringsource",
  "mmfparser/common.pxd",
  "mmfparser/bytereader.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9mmfparser_10bytereader_ByteReader;
struct __pyx_obj_9mmfparser_6loader_DataLoader;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString;

/* "mmfparser/bytereader.pxd":33
 *     cpdef int tell(self)
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)             # <<<<<<<<<<<<<<
 *     cpdef read(self, int size = ?)
 *     cpdef adjust(self, int to)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek {
  int __pyx_n;
  int mode;
};

/* "mmfparser/bytereader.pxd":34
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)
 *     cpdef read(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read {
  int __pyx_n;
  int size;
};

/* "mmfparser/bytereader.pxd":37
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10
 *     cpdef float readFloat(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser/bytereader.pxd":38
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser/bytereader.pxd":41
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser/bytereader.pxd":42
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef unicode readUnicodeString(self, size=?)
 *     cpdef tuple readColor(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser/bytereader.pxd":43
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef tuple readColor(self)
 *     cpdef ByteReader readReader(self, size_t size)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString;

/* "mmfparser/loader.pxd":31
 *     cdef bint init(self, ByteReader reader, DataLoader parent,
 *                    dict settings) except False
 *     cpdef readString(self, ByteReader reader, size=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding;
struct __pyx_ctuple_long__and_long__and_long;
typedef struct __pyx_ctuple_long__and_long__and_long __pyx_ctuple_long__and_long__and_long;

/* "mmfparser/data/chunkloaders/imagebank.pyx":211
 *     return points, n
 * 
 * cdef inline int get_padding(int width, BasePoint pointClass, int bytes = 2):             # <<<<<<<<<<<<<<
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)
 */
struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding {
  int __pyx_n;
  int bytes;
};

/* "mmfparser/data/chunkloaders/imagebank.pyx":429
 *         self.actionY = newReader.readShort()
 *         if old:
 *             self.transparent = (0, 0, 0)             # <<<<<<<<<<<<<<
 *         else:
 *             self.transparent = newReader.readColor()
 */
struct __pyx_ctuple_long__and_long__and_long {
  long f0;
  long f1;
  long f2;
};

/* "mmfparser/bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */
struct __pyx_obj_9mmfparser_10bytereader_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtab;
  unsigned char *buffer;
  unsigned int start;
  unsigned int pos;
  unsigned int data_size;
  unsigned int lastPosition;
  PyObject *original;
  int shared;
  PyObject *python_fp;
};


/* "mmfparser/loader.pxd":20
 * from mmfparser.bytereader cimport ByteReader
 * 
 * cdef class DataLoader             # <<<<<<<<<<<<<<
 * 
 * cdef class DataLoader:
 */
struct __pyx_obj_9mmfparser_6loader_DataLoader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtab;
  PyObject *settings;
  struct __pyx_obj_9mmfparser_6loader_DataLoader *parent;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":100
 *     return newImage
 * 
 * cdef class BasePoint             # <<<<<<<<<<<<<<
 * 
 * cdef class BasePoint:
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_vtab;
  int size;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":108
 *         pass
 * 
 * cdef class Point(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 3
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":126
 * cdef BasePoint point_instance = Point()
 * 
 * cdef class SixteenPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 2
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":154
 * cdef BasePoint sixteen_point = SixteenPoint()
 * 
 * cdef class FifteenPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 2
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":183
 * cdef BasePoint fifteen_point = FifteenPoint()
 * 
 * cdef class IndexPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 1
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":39
 * cdef int FIFTEENPOINT_MODE = 6  # 32768 colors
 * 
 * cdef class ImageItem             # <<<<<<<<<<<<<<
 * 
 * cdef inline object indexImage(ImageItem item, frame):
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  int handle;
  int checksum;
  int references;
  short width;
  short height;
  short xHotspot;
  short yHotspot;
  short actionX;
  short actionY;
  PyObject *flags;
  PyObject *image;
  PyObject *alpha;
  int indexed;
  char graphicMode;
  PyObject *transparent;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *reader;
  size_t pos;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":530
 *         return graphicModes[self.graphicMode]
 * 
 * cdef class JavaImage(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int handle
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  int handle;
  int xHotspot;
  int yHotspot;
  int actionX;
  int actionY;
  int width;
  int height;
  PyObject *data;
  int flash;
};


/* "mmfparser/data/chunkloaders/imagebank.pyx":586
 *         return img.get_data()
 * 
 * cdef class ImageBank(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         dict itemDict
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *itemDict;
};



/* "mmfparser/bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */

struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader {
  int (*tell)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*data)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  int (*seek)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args);
  PyObject *(*read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args);
  PyObject *(*adjust)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch);
  size_t (*size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  short (*readByte)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  double (*readDouble)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*readInt)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args);
  PyObject *(*readUnicodeString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args);
  PyObject *(*readColor)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *(*readReader)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*write)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch);
  int (*write_size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch);
  int (*skipBytes)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*rewind)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*_read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int);
};
static struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtabptr_9mmfparser_10bytereader_ByteReader;


/* "mmfparser/loader.pxd":20
 * from mmfparser.bytereader cimport ByteReader
 * 
 * cdef class DataLoader             # <<<<<<<<<<<<<<
 * 
 * cdef class DataLoader:
 */

struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader {
  PyObject *(*read)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*initialize)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch);
  int (*init)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, struct __pyx_obj_9mmfparser_6loader_DataLoader *, PyObject *);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString *__pyx_optional_args);
};
static struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtabptr_9mmfparser_6loader_DataLoader;


/* "mmfparser/data/chunkloaders/imagebank.pyx":341
 * )
 * 
 * cdef class ImageItem(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int handle
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *(*load)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;


/* "mmfparser/data/chunkloaders/imagebank.pyx":102
 * cdef class BasePoint
 * 
 * cdef class BasePoint:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int size
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint {
  unsigned int (*read)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;


/* "mmfparser/data/chunkloaders/imagebank.pyx":108
 *         pass
 * 
 * cdef class Point(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 3
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_Point {
  struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
  PyObject *(*write)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *, PyObject *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_Point;


/* "mmfparser/data/chunkloaders/imagebank.pyx":126
 * cdef BasePoint point_instance = Point()
 * 
 * cdef class SixteenPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 2
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint {
  struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
  PyObject *(*write)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;


/* "mmfparser/data/chunkloaders/imagebank.pyx":154
 * cdef BasePoint sixteen_point = SixteenPoint()
 * 
 * cdef class FifteenPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 2
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint {
  struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
  PyObject *(*write)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;


/* "mmfparser/data/chunkloaders/imagebank.pyx":183
 * cdef BasePoint fifteen_point = FifteenPoint()
 * 
 * cdef class IndexPoint(BasePoint):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.size = 1
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint {
  struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_base;
  PyObject *(*write)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *, PyObject *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *);
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;


/* "mmfparser/data/chunkloaders/imagebank.pyx":530
 *         return graphicModes[self.graphicMode]
 * 
 * cdef class JavaImage(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int handle
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;


/* "mmfparser/data/chunkloaders/imagebank.pyx":586
 *         return img.get_data()
 * 
 * cdef class ImageBank(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         dict itemDict
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_LshiftObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_LshiftObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceLshift(op1, op2) : PyNumber_Lshift(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RshiftObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRshift(op1, op2) : PyNumber_Rshift(op1, op2))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_35
#define __PYX_HAVE_RT_ImportType_proto_0_29_35
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_35(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_35(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_35 {
   __Pyx_ImportType_CheckSize_Error_0_29_35 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_35 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_35 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_35(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_35 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_long__and_long__and_long(__pyx_ctuple_long__and_long__and_long);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

/* CIntFromPy.proto */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_data, CYTHON_UNUSED int __pyx_v_position); /* proto*/
static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_write(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, PyObject *__pyx_v_item, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto*/
static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_item, CYTHON_UNUSED struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto*/
static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_item, CYTHON_UNUSED struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto*/
static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_write(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, PyObject *__pyx_v_point, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_load(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'mmfparser.bytereader' */
static PyTypeObject *__pyx_ptype_9mmfparser_10bytereader_ByteReader = 0;

/* Module declarations from 'mmfparser.loader' */
static PyTypeObject *__pyx_ptype_9mmfparser_6loader_DataLoader = 0;

/* Module declarations from 'mmfparser.common' */
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int, char **); /*proto*/

/* Module declarations from 'mmfparser.data.chunkloaders.imagebank' */
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_Point = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank = 0;
static int __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_POINT_MODE;
static int __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_FIFTEENPOINT_MODE;
static struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance = 0;
static struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point = 0;
static struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point = 0;
static struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point = 0;
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_indexImage(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_joinImage(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rgb(char *, int, int, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *); /*proto*/
static CYTHON_INLINE int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(int, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rle(char *, int, int, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_alpha(char *, int, int, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_alpha(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_image(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, PyObject *); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageItem__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, PyObject *); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_JavaImage__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *, PyObject *); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageBank__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "mmfparser.data.chunkloaders.imagebank"
extern int __pyx_module_is_main_mmfparser__data__chunkloaders__imagebank;
int __pyx_module_is_main_mmfparser__data__chunkloaders__imagebank = 0;

/* Implementation of 'mmfparser.data.chunkloaders.imagebank' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_ACE[] = "ACE";
static const char __pyx_k_LZX[] = "LZX";
static const char __pyx_k_Mac[] = "Mac";
static const char __pyx_k_RLE[] = "RLE";
static const char __pyx_k__11[] = "\000\000";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "new";
static const char __pyx_k_old[] = "old";
static const char __pyx_k_pad[] = "pad";
static const char __pyx_k_ARGB[] = "ARGB";
static const char __pyx_k_RGBA[] = "RGBA";
static const char __pyx_k_RLET[] = "RLET";
static const char __pyx_k_RLEW[] = "RLEW";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_java[] = "java";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_tell[] = "tell";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_zlib[] = "zlib";
static const char __pyx_k_Alpha[] = "Alpha";
static const char __pyx_k_Image[] = "Image";
static const char __pyx_k_Point[] = "Point";
static const char __pyx_k_build[] = "build";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_local[] = "local";
static const char __pyx_k_new_2[] = "__new__";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unload[] = "unload";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_BitDict[] = "BitDict";
static const char __pyx_k_offsets[] = "offsets";
static const char __pyx_k_palette[] = "palette";
static const char __pyx_k_AGMIBank[] = "AGMIBank";
static const char __pyx_k_StringIO[] = "StringIO";
static const char __pyx_k_anchor_x[] = "anchor_x";
static const char __pyx_k_anchor_y[] = "anchor_y";
static const char __pyx_k_compress[] = "compress";
static const char __pyx_k_get_data[] = "get_data";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_interact[] = "interact";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setFlags[] = "setFlags";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_withSize[] = "withSize";
static const char __pyx_k_writeInt[] = "writeInt";
static const char __pyx_k_zlibdata[] = "zlibdata";
static const char __pyx_k_BasePoint[] = "BasePoint";
static const char __pyx_k_ImageBank[] = "ImageBank";
static const char __pyx_k_ImageData[] = "ImageData";
static const char __pyx_k_ImageItem[] = "ImageItem";
static const char __pyx_k_JavaImage[] = "JavaImage";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_alphaSize[] = "alphaSize";
static const char __pyx_k_bytesRead[] = "bytesRead";
static const char __pyx_k_cStringIO[] = "cStringIO";
static const char __pyx_k_imageSize[] = "imageSize";
static const char __pyx_k_newReader[] = "newReader";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_writeByte[] = "writeByte";
static const char __pyx_k_IndexPoint[] = "IndexPoint";
static const char __pyx_k_decompress[] = "decompress";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_loadImages[] = "loadImages";
static const char __pyx_k_load_image[] = "load_image";
static const char __pyx_k_openEditor[] = "openEditor";
static const char __pyx_k_pointClass[] = "pointClass";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_readerData[] = "readerData";
static const char __pyx_k_writeColor[] = "writeColor";
static const char __pyx_k_writeShort[] = "writeShort";
static const char __pyx_k_IMAGE_FLAGS[] = "IMAGE_FLAGS";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_writeReader[] = "writeReader";
static const char __pyx_k_FifteenPoint[] = "FifteenPoint";
static const char __pyx_k_SixteenPoint[] = "SixteenPoint";
static const char __pyx_k_decompressed[] = "decompressed";
static const char __pyx_k_graphicModes[] = "graphicModes";
static const char __pyx_k_onepointfive[] = "onepointfive";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_not_supported[] = "not supported";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_mmfparser_data[] = "mmfparser.data";
static const char __pyx_k_mmfparser_image[] = "mmfparser.image";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_mmfparser_bitdict[] = "mmfparser.bitdict";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_pyx_unpickle_BasePoint[] = "__pyx_unpickle_BasePoint";
static const char __pyx_k_pyx_unpickle_ImageBank[] = "__pyx_unpickle_ImageBank";
static const char __pyx_k_pyx_unpickle_ImageItem[] = "__pyx_unpickle_ImageItem";
static const char __pyx_k_pyx_unpickle_JavaImage[] = "__pyx_unpickle_JavaImage";
static const char __pyx_k_unknown_graphic_mode_s[] = "unknown graphic mode: %s";
static const char __pyx_k_mmfparser_player_common[] = "mmfparser.player.common";
static const char __pyx_k_mmfparser_player_sprite[] = "mmfparser.player.sprite";
static const char __pyx_k_Writing_Texture_to_MFA_s[] = "Writing Texture to MFA: %s";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))";
static const char __pyx_k_mmfparser_data_chunkloaders_apph[] = "mmfparser.data.chunkloaders.appheader";
static const char __pyx_k_mmfparser_data_chunkloaders_imag[] = "mmfparser.data.chunkloaders.imagebank";
static const char __pyx_k_mmfparser_data_mfaloaders_imageb[] = "mmfparser.data.mfaloaders.imagebank";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_4[] = "Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))";
static PyObject *__pyx_n_s_ACE;
static PyObject *__pyx_n_s_AGMIBank;
static PyObject *__pyx_n_s_ARGB;
static PyObject *__pyx_n_s_Alpha;
static PyObject *__pyx_n_s_BasePoint;
static PyObject *__pyx_n_s_BitDict;
static PyObject *__pyx_n_s_FifteenPoint;
static PyObject *__pyx_n_s_IMAGE_FLAGS;
static PyObject *__pyx_n_s_Image;
static PyObject *__pyx_n_s_ImageBank;
static PyObject *__pyx_n_s_ImageData;
static PyObject *__pyx_n_s_ImageItem;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4;
static PyObject *__pyx_n_s_IndexPoint;
static PyObject *__pyx_n_s_JavaImage;
static PyObject *__pyx_n_s_LZX;
static PyObject *__pyx_n_s_Mac;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Point;
static PyObject *__pyx_n_s_RGBA;
static PyObject *__pyx_n_s_RLE;
static PyObject *__pyx_n_s_RLET;
static PyObject *__pyx_n_s_RLEW;
static PyObject *__pyx_n_s_SixteenPoint;
static PyObject *__pyx_n_s_StringIO;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Writing_Texture_to_MFA_s;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alphaSize;
static PyObject *__pyx_n_s_anchor_x;
static PyObject *__pyx_n_s_anchor_y;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_n_s_bytesRead;
static PyObject *__pyx_n_s_cStringIO;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_code;
static PyObject *__pyx_n_s_compress;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_decompress;
static PyObject *__pyx_n_s_decompressed;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_frame;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_data;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_graphicModes;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_imageSize;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_interact;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_java;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_loadImages;
static PyObject *__pyx_n_s_load_image;
static PyObject *__pyx_n_s_local;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mmfparser_bitdict;
static PyObject *__pyx_n_s_mmfparser_data;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders_apph;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders_imag;
static PyObject *__pyx_n_s_mmfparser_data_mfaloaders_imageb;
static PyObject *__pyx_n_s_mmfparser_image;
static PyObject *__pyx_n_s_mmfparser_player_common;
static PyObject *__pyx_n_s_mmfparser_player_sprite;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newReader;
static PyObject *__pyx_n_s_new_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_s_not_supported;
static PyObject *__pyx_n_s_offsets;
static PyObject *__pyx_n_s_old;
static PyObject *__pyx_n_s_onepointfive;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_openEditor;
static PyObject *__pyx_n_s_pad;
static PyObject *__pyx_n_s_palette;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pointClass;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_BasePoint;
static PyObject *__pyx_n_s_pyx_unpickle_ImageBank;
static PyObject *__pyx_n_s_pyx_unpickle_ImageItem;
static PyObject *__pyx_n_s_pyx_unpickle_JavaImage;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rb;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reader;
static PyObject *__pyx_n_s_readerData;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setFlags;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_tell;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_unknown_graphic_mode_s;
static PyObject *__pyx_n_s_unload;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_withSize;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeByte;
static PyObject *__pyx_n_s_writeColor;
static PyObject *__pyx_n_s_writeInt;
static PyObject *__pyx_n_s_writeReader;
static PyObject *__pyx_n_s_writeShort;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zlib;
static PyObject *__pyx_n_s_zlibdata;
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint___reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_2__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_2read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_4load(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_frame, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_frame, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_12unload(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_14getGraphicMode(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_16__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_18__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_10__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_2read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_4write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_6fromHandle(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_handle); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_10__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_2__pyx_unpickle_ImageItem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_4__pyx_unpickle_JavaImage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_6__pyx_unpickle_ImageBank(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_Point(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, &__pyx_n_s_values, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_42086494;
static PyObject *__pyx_int_55871985;
static PyObject *__pyx_int_77380336;
static PyObject *__pyx_int_90701170;
static PyObject *__pyx_int_107805040;
static PyObject *__pyx_int_116650556;
static PyObject *__pyx_int_132633409;
static PyObject *__pyx_int_143878369;
static PyObject *__pyx_int_154289730;
static PyObject *__pyx_int_214813672;
static PyObject *__pyx_int_259006361;
static PyObject *__pyx_int_259773963;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
/* Late includes */

/* "mmfparser/data/chunkloaders/imagebank.pyx":41
 * cdef class ImageItem
 * 
 * cdef inline object indexImage(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef tuple current_value
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_indexImage(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_item, PyObject *__pyx_v_frame) {
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_current_value = 0;
  unsigned int *__pyx_v_image;
  unsigned int *__pyx_v_new_points_array;
  char *__pyx_v_new_points;
  PyObject *__pyx_v_str_points = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indexImage", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":47
 *     cdef unsigned int * new_points_array
 *     cdef char * new_points
 *     if not item.indexed:             # <<<<<<<<<<<<<<
 *         return item.image
 *     else:
 */
  __pyx_t_1 = ((!(__pyx_v_item->indexed != 0)) != 0);
  if (__pyx_t_1) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":48
 *     cdef char * new_points
 *     if not item.indexed:
 *         return item.image             # <<<<<<<<<<<<<<
 *     else:
 *         image = <unsigned int *>(<char *>item.image)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_item->image);
    __pyx_r = __pyx_v_item->image;
    goto __pyx_L0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":47
 *     cdef unsigned int * new_points_array
 *     cdef char * new_points
 *     if not item.indexed:             # <<<<<<<<<<<<<<
 *         return item.image
 *     else:
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":50
 *         return item.image
 *     else:
 *         image = <unsigned int *>(<char *>item.image)             # <<<<<<<<<<<<<<
 *         str_points = allocate_memory(len(item.image), &new_points)
 *         new_points_array = <unsigned int *>new_points
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_item->image); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L1_error)
    __pyx_v_image = ((unsigned int *)((char *)__pyx_t_2));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":51
 *     else:
 *         image = <unsigned int *>(<char *>item.image)
 *         str_points = allocate_memory(len(item.image), &new_points)             # <<<<<<<<<<<<<<
 *         new_points_array = <unsigned int *>new_points
 *         for i in range(len(item.image) / 4):
 */
    __pyx_t_3 = __pyx_v_item->image;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_9mmfparser_6common_allocate_memory(__pyx_t_4, (&__pyx_v_new_points)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_str_points = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":52
 *         image = <unsigned int *>(<char *>item.image)
 *         str_points = allocate_memory(len(item.image), &new_points)
 *         new_points_array = <unsigned int *>new_points             # <<<<<<<<<<<<<<
 *         for i in range(len(item.image) / 4):
 *             current_value = frame.palette.items[image[i]]
 */
    __pyx_v_new_points_array = ((unsigned int *)__pyx_v_new_points);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":53
 *         str_points = allocate_memory(len(item.image), &new_points)
 *         new_points_array = <unsigned int *>new_points
 *         for i in range(len(item.image) / 4):             # <<<<<<<<<<<<<<
 *             current_value = frame.palette.items[image[i]]
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |
 */
    __pyx_t_3 = __pyx_v_item->image;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_4 / 4);
    __pyx_t_4 = __pyx_t_5;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":54
 *         new_points_array = <unsigned int *>new_points
 *         for i in range(len(item.image) / 4):
 *             current_value = frame.palette.items[image[i]]             # <<<<<<<<<<<<<<
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |
 *                 current_value[2] << 16)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_palette); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_items); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_7, (__pyx_v_image[__pyx_v_i]), unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_current_value, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":55
 *         for i in range(len(item.image) / 4):
 *             current_value = frame.palette.items[image[i]]
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |             # <<<<<<<<<<<<<<
 *                 current_value[2] << 16)
 *         return str_points
 */
      if (unlikely(__pyx_v_current_value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 55, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_current_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_current_value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 55, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_current_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_LshiftObjC(__pyx_t_7, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Or(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":56
 *             current_value = frame.palette.items[image[i]]
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |
 *                 current_value[2] << 16)             # <<<<<<<<<<<<<<
 *         return str_points
 * 
 */
      if (unlikely(__pyx_v_current_value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 56, __pyx_L1_error)
      }
      __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_current_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_t_8, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":55
 *         for i in range(len(item.image) / 4):
 *             current_value = frame.palette.items[image[i]]
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |             # <<<<<<<<<<<<<<
 *                 current_value[2] << 16)
 *         return str_points
 */
      __pyx_t_8 = PyNumber_Or(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      (__pyx_v_new_points_array[__pyx_v_i]) = __pyx_t_9;
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":57
 *             new_points_array[i] = (current_value[0] | current_value[1] << 8 |
 *                 current_value[2] << 16)
 *         return str_points             # <<<<<<<<<<<<<<
 * 
 * cdef inline str joinImage(bytes points, bytes alpha):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_str_points);
    __pyx_r = __pyx_v_str_points;
    goto __pyx_L0;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":41
 * cdef class ImageItem
 * 
 * cdef inline object indexImage(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef tuple current_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.indexImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current_value);
  __Pyx_XDECREF(__pyx_v_str_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":59
 *         return str_points
 * 
 * cdef inline str joinImage(bytes points, bytes alpha):             # <<<<<<<<<<<<<<
 *     cdef char * c_array_string
 *     cdef unsigned int value
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_joinImage(PyObject *__pyx_v_points, PyObject *__pyx_v_alpha) {
  char *__pyx_v_c_array_string;
  PyObject *__pyx_v_new_points = NULL;
  unsigned int *__pyx_v_c_array;
  unsigned int *__pyx_v_points_c;
  char *__pyx_v_alpha_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("joinImage", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":62
 *     cdef char * c_array_string
 *     cdef unsigned int value
 *     new_points = allocate_memory(len(points), &c_array_string)             # <<<<<<<<<<<<<<
 *     cdef unsigned int * c_array = <unsigned int *>c_array_string
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)
 */
  if (unlikely(__pyx_v_points == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_1 = PyBytes_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_9mmfparser_6common_allocate_memory(__pyx_t_1, (&__pyx_v_c_array_string)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_new_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":63
 *     cdef unsigned int value
 *     new_points = allocate_memory(len(points), &c_array_string)
 *     cdef unsigned int * c_array = <unsigned int *>c_array_string             # <<<<<<<<<<<<<<
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)
 *     cdef char * alpha_c = alpha
 */
  __pyx_v_c_array = ((unsigned int *)__pyx_v_c_array_string);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":64
 *     new_points = allocate_memory(len(points), &c_array_string)
 *     cdef unsigned int * c_array = <unsigned int *>c_array_string
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)             # <<<<<<<<<<<<<<
 *     cdef char * alpha_c = alpha
 *     cdef int i
 */
  if (unlikely(__pyx_v_points == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_points); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_v_points_c = ((unsigned int *)((char *)__pyx_t_3));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":65
 *     cdef unsigned int * c_array = <unsigned int *>c_array_string
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)
 *     cdef char * alpha_c = alpha             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(len(points) / 4):
 */
  if (unlikely(__pyx_v_alpha == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 65, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_alpha); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_v_alpha_c = __pyx_t_3;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":67
 *     cdef char * alpha_c = alpha
 *     cdef int i
 *     for i in range(len(points) / 4):             # <<<<<<<<<<<<<<
 *         c_array[i] = points_c[i] | ((<unsigned char *>alpha_c)[i] << 24)
 *     return new_points
 */
  if (unlikely(__pyx_v_points == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 67, __pyx_L1_error)
  }
  __pyx_t_1 = PyBytes_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_1 / 4);
  __pyx_t_1 = __pyx_t_4;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":68
 *     cdef int i
 *     for i in range(len(points) / 4):
 *         c_array[i] = points_c[i] | ((<unsigned char *>alpha_c)[i] << 24)             # <<<<<<<<<<<<<<
 *     return new_points
 * 
 */
    (__pyx_v_c_array[__pyx_v_i]) = ((__pyx_v_points_c[__pyx_v_i]) | ((((unsigned char *)__pyx_v_alpha_c)[__pyx_v_i]) << 24));
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":69
 *     for i in range(len(points) / 4):
 *         c_array[i] = points_c[i] | ((<unsigned char *>alpha_c)[i] << 24)
 *     return new_points             # <<<<<<<<<<<<<<
 * 
 * cdef inline object getImageData(ImageItem item, frame):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyString_CheckExact(__pyx_v_new_points))||((__pyx_v_new_points) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_new_points)->tp_name), 0))) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_new_points);
  __pyx_r = ((PyObject*)__pyx_v_new_points);
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":59
 *         return str_points
 * 
 * cdef inline str joinImage(bytes points, bytes alpha):             # <<<<<<<<<<<<<<
 *     cdef char * c_array_string
 *     cdef unsigned int value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.joinImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":71
 *     return new_points
 * 
 * cdef inline object getImageData(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     cdef unsigned int point
 *     cdef unsigned int transparent
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_item, PyObject *__pyx_v_frame) {
  unsigned int __pyx_v_transparent;
  PyObject *__pyx_v_points = 0;
  unsigned int *__pyx_v_points_c;
  int __pyx_v_i;
  unsigned int *__pyx_v_c_array;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getImageData", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":74
 *     cdef unsigned int point
 *     cdef unsigned int transparent
 *     cdef object points = indexImage(item, frame)             # <<<<<<<<<<<<<<
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)
 *     cdef int i
 */
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_indexImage(__pyx_v_item, __pyx_v_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_points = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":75
 *     cdef unsigned int transparent
 *     cdef object points = indexImage(item, frame)
 *     cdef unsigned int * points_c = <unsigned int *>(<char *>points)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef unsigned int * c_array
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_points); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_v_points_c = ((unsigned int *)((char *)__pyx_t_2));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":78
 *     cdef int i
 *     cdef unsigned int * c_array
 *     if item.alpha:             # <<<<<<<<<<<<<<
 *         data = joinImage(points, item.alpha)
 *     else:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_item->alpha); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 78, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":79
 *     cdef unsigned int * c_array
 *     if item.alpha:
 *         data = joinImage(points, item.alpha)             # <<<<<<<<<<<<<<
 *     else:
 *         transparent = (item.transparent[0] | item.transparent[1] << 8 |
 */
    if (!(likely(PyBytes_CheckExact(__pyx_v_points))||((__pyx_v_points) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_points)->tp_name), 0))) __PYX_ERR(0, 79, __pyx_L1_error)
    if (!(likely(PyBytes_CheckExact(__pyx_v_item->alpha))||((__pyx_v_item->alpha) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_item->alpha)->tp_name), 0))) __PYX_ERR(0, 79, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_item->alpha;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_joinImage(((PyObject*)__pyx_v_points), ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_data = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":78
 *     cdef int i
 *     cdef unsigned int * c_array
 *     if item.alpha:             # <<<<<<<<<<<<<<
 *         data = joinImage(points, item.alpha)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":81
 *         data = joinImage(points, item.alpha)
 *     else:
 *         transparent = (item.transparent[0] | item.transparent[1] << 8 |             # <<<<<<<<<<<<<<
 *             item.transparent[2] << 16)
 *         data = allocate_memory(len(points), <char**>&c_array)
 */
  /*else*/ {
    if (unlikely(__pyx_v_item->transparent == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_item->transparent, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_item->transparent == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_item->transparent, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_LshiftObjC(__pyx_t_1, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Or(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":82
 *     else:
 *         transparent = (item.transparent[0] | item.transparent[1] << 8 |
 *             item.transparent[2] << 16)             # <<<<<<<<<<<<<<
 *         data = allocate_memory(len(points), <char**>&c_array)
 *         for i in range(len(points) / 4):
 */
    if (unlikely(__pyx_v_item->transparent == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 82, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_item->transparent, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_LshiftObjC(__pyx_t_5, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":81
 *         data = joinImage(points, item.alpha)
 *     else:
 *         transparent = (item.transparent[0] | item.transparent[1] << 8 |             # <<<<<<<<<<<<<<
 *             item.transparent[2] << 16)
 *         data = allocate_memory(len(points), <char**>&c_array)
 */
    __pyx_t_5 = PyNumber_Or(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_transparent = __pyx_t_6;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":83
 *         transparent = (item.transparent[0] | item.transparent[1] << 8 |
 *             item.transparent[2] << 16)
 *         data = allocate_memory(len(points), <char**>&c_array)             # <<<<<<<<<<<<<<
 *         for i in range(len(points) / 4):
 *             if points_c[i] == transparent:
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
    __pyx_t_5 = __pyx_f_9mmfparser_6common_allocate_memory(__pyx_t_7, ((char **)(&__pyx_v_c_array))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_data = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":84
 *             item.transparent[2] << 16)
 *         data = allocate_memory(len(points), <char**>&c_array)
 *         for i in range(len(points) / 4):             # <<<<<<<<<<<<<<
 *             if points_c[i] == transparent:
 *                 c_array[i] = points_c[i]
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 84, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 / 4);
    __pyx_t_7 = __pyx_t_8;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":85
 *         data = allocate_memory(len(points), <char**>&c_array)
 *         for i in range(len(points) / 4):
 *             if points_c[i] == transparent:             # <<<<<<<<<<<<<<
 *                 c_array[i] = points_c[i]
 *             else:
 */
      __pyx_t_3 = (((__pyx_v_points_c[__pyx_v_i]) == __pyx_v_transparent) != 0);
      if (__pyx_t_3) {

        /* "mmfparser/data/chunkloaders/imagebank.pyx":86
 *         for i in range(len(points) / 4):
 *             if points_c[i] == transparent:
 *                 c_array[i] = points_c[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 c_array[i] = points_c[i] | <unsigned int>(0xFF << 24)
 */
        (__pyx_v_c_array[__pyx_v_i]) = (__pyx_v_points_c[__pyx_v_i]);

        /* "mmfparser/data/chunkloaders/imagebank.pyx":85
 *         data = allocate_memory(len(points), <char**>&c_array)
 *         for i in range(len(points) / 4):
 *             if points_c[i] == transparent:             # <<<<<<<<<<<<<<
 *                 c_array[i] = points_c[i]
 *             else:
 */
        goto __pyx_L6;
      }

      /* "mmfparser/data/chunkloaders/imagebank.pyx":88
 *                 c_array[i] = points_c[i]
 *             else:
 *                 c_array[i] = points_c[i] | <unsigned int>(0xFF << 24)             # <<<<<<<<<<<<<<
 *     return data
 * 
 */
      /*else*/ {
        (__pyx_v_c_array[__pyx_v_i]) = ((__pyx_v_points_c[__pyx_v_i]) | ((unsigned int)0xFF000000));
      }
      __pyx_L6:;
    }
  }
  __pyx_L3:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":89
 *             else:
 *                 c_array[i] = points_c[i] | <unsigned int>(0xFF << 24)
 *     return data             # <<<<<<<<<<<<<<
 * 
 * cdef inline object createDisplay(ImageItem item, frame):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":71
 *     return new_points
 * 
 * cdef inline object getImageData(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     cdef unsigned int point
 *     cdef unsigned int transparent
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.getImageData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":91
 *     return data
 * 
 * cdef inline object createDisplay(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     data = getImageData(item, frame)
 *     from mmfparser.player.sprite import ImageData
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_item, PyObject *__pyx_v_frame) {
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_ImageData = NULL;
  PyObject *__pyx_v_newImage = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createDisplay", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":92
 * 
 * cdef inline object createDisplay(ImageItem item, frame):
 *     data = getImageData(item, frame)             # <<<<<<<<<<<<<<
 *     from mmfparser.player.sprite import ImageData
 *     newImage = ImageData(item.width, item.height, 'RGBA', data,
 */
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_getImageData(__pyx_v_item, __pyx_v_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":93
 * cdef inline object createDisplay(ImageItem item, frame):
 *     data = getImageData(item, frame)
 *     from mmfparser.player.sprite import ImageData             # <<<<<<<<<<<<<<
 *     newImage = ImageData(item.width, item.height, 'RGBA', data,
 *         -item.width * 4, item.alpha)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ImageData);
  __Pyx_GIVEREF(__pyx_n_s_ImageData);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ImageData);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_player_sprite, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ImageData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ImageData = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":94
 *     data = getImageData(item, frame)
 *     from mmfparser.player.sprite import ImageData
 *     newImage = ImageData(item.width, item.height, 'RGBA', data,             # <<<<<<<<<<<<<<
 *         -item.width * 4, item.alpha)
 *     newImage.anchor_x = item.xHotspot
 */
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_item->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_item->height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":95
 *     from mmfparser.player.sprite import ImageData
 *     newImage = ImageData(item.width, item.height, 'RGBA', data,
 *         -item.width * 4, item.alpha)             # <<<<<<<<<<<<<<
 *     newImage.anchor_x = item.xHotspot
 *     newImage.anchor_y = item.height - item.yHotspot
 */
  __pyx_t_4 = __Pyx_PyInt_From_long(((-__pyx_v_item->width) * 4)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_ImageData);
  __pyx_t_5 = __pyx_v_ImageData; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_6, __pyx_t_1, __pyx_t_3, __pyx_n_s_RGBA, __pyx_v_data, __pyx_t_4, __pyx_v_item->alpha};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_6, __pyx_t_1, __pyx_t_3, __pyx_n_s_RGBA, __pyx_v_data, __pyx_t_4, __pyx_v_item->alpha};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_RGBA);
    __Pyx_GIVEREF(__pyx_n_s_RGBA);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_n_s_RGBA);
    __Pyx_INCREF(__pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, __pyx_v_data);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_7, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_item->alpha);
    __Pyx_GIVEREF(__pyx_v_item->alpha);
    PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_7, __pyx_v_item->alpha);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_newImage = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":96
 *     newImage = ImageData(item.width, item.height, 'RGBA', data,
 *         -item.width * 4, item.alpha)
 *     newImage.anchor_x = item.xHotspot             # <<<<<<<<<<<<<<
 *     newImage.anchor_y = item.height - item.yHotspot
 *     return newImage
 */
  __pyx_t_2 = __Pyx_PyInt_From_short(__pyx_v_item->xHotspot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newImage, __pyx_n_s_anchor_x, __pyx_t_2) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":97
 *         -item.width * 4, item.alpha)
 *     newImage.anchor_x = item.xHotspot
 *     newImage.anchor_y = item.height - item.yHotspot             # <<<<<<<<<<<<<<
 *     return newImage
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_item->height - __pyx_v_item->yHotspot)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newImage, __pyx_n_s_anchor_y, __pyx_t_2) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":98
 *     newImage.anchor_x = item.xHotspot
 *     newImage.anchor_y = item.height - item.yHotspot
 *     return newImage             # <<<<<<<<<<<<<<
 * 
 * cdef class BasePoint
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_newImage);
  __pyx_r = __pyx_v_newImage;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":91
 *     return data
 * 
 * cdef inline object createDisplay(ImageItem item, frame):             # <<<<<<<<<<<<<<
 *     data = getImageData(item, frame)
 *     from mmfparser.player.sprite import ImageData
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.createDisplay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ImageData);
  __Pyx_XDECREF(__pyx_v_newImage);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":105
 *     cdef public:
 *         int size
 *     cdef unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_data, CYTHON_UNUSED int __pyx_v_position) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":104
 * cdef class BasePoint:
 *     cdef public:
 *         int size             # <<<<<<<<<<<<<<
 *     cdef unsigned int read(self, char * data, int position):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.BasePoint.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_v_self->size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.BasePoint.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint___reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint___reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.size,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.size,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.size,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.size,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_BasePoint); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_259773963);
    __Pyx_GIVEREF(__pyx_int_259773963);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_259773963);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, None), state
 *     else:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BasePoint__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BasePoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_259773963);
    __Pyx_GIVEREF(__pyx_int_259773963);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_259773963);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.BasePoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BasePoint__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_2__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_2__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BasePoint__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BasePoint, (type(self), 0xf7bd60b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BasePoint__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.BasePoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":109
 * 
 * cdef class Point(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 3
 * 
 */

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point___cinit__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":110
 * cdef class Point(BasePoint):
 *     def __cinit__(self):
 *         self.size = 3             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unsigned int read(self, char * data, int position):
 */
  __pyx_v_self->__pyx_base.size = 3;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":109
 * 
 * cdef class Point(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 3
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":112
 *         self.size = 3
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned char r, g, b
 *         b = <unsigned char>data[position]
 */

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position) {
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":114
 *     cdef inline unsigned int read(self, char * data, int position):
 *         cdef unsigned char r, g, b
 *         b = <unsigned char>data[position]             # <<<<<<<<<<<<<<
 *         g = <unsigned char>data[position+1]
 *         r = <unsigned char>data[position+2]
 */
  __pyx_v_b = ((unsigned char)(__pyx_v_data[__pyx_v_position]));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":115
 *         cdef unsigned char r, g, b
 *         b = <unsigned char>data[position]
 *         g = <unsigned char>data[position+1]             # <<<<<<<<<<<<<<
 *         r = <unsigned char>data[position+2]
 *         return r | g << 8 | b << 16
 */
  __pyx_v_g = ((unsigned char)(__pyx_v_data[(__pyx_v_position + 1)]));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":116
 *         b = <unsigned char>data[position]
 *         g = <unsigned char>data[position+1]
 *         r = <unsigned char>data[position+2]             # <<<<<<<<<<<<<<
 *         return r | g << 8 | b << 16
 * 
 */
  __pyx_v_r = ((unsigned char)(__pyx_v_data[(__pyx_v_position + 2)]));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":117
 *         g = <unsigned char>data[position+1]
 *         r = <unsigned char>data[position+2]
 *         return r | g << 8 | b << 16             # <<<<<<<<<<<<<<
 * 
 *     cdef write(self, item, ByteReader reader):
 */
  __pyx_r = ((__pyx_v_r | (__pyx_v_g << 8)) | (__pyx_v_b << 16));
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":112
 *         self.size = 3
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned char r, g, b
 *         b = <unsigned char>data[position]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":119
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(self, item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         reader.writeByte(item[2], True)
 *         reader.writeByte(item[1], True)
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_write(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, PyObject *__pyx_v_item, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":120
 * 
 *     cdef write(self, item, ByteReader reader):
 *         reader.writeByte(item[2], True)             # <<<<<<<<<<<<<<
 *         reader.writeByte(item[1], True)
 *         reader.writeByte(item[0], True)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, Py_True};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, Py_True};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, Py_True);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":121
 *     cdef write(self, item, ByteReader reader):
 *         reader.writeByte(item[2], True)
 *         reader.writeByte(item[1], True)             # <<<<<<<<<<<<<<
 *         reader.writeByte(item[0], True)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, Py_True};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, Py_True};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, Py_True);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":122
 *         reader.writeByte(item[2], True)
 *         reader.writeByte(item[1], True)
 *         reader.writeByte(item[0], True)             # <<<<<<<<<<<<<<
 * 
 * cdef BasePoint point_instance = Point()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, Py_True};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, Py_True};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, Py_True);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":119
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(self, item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         reader.writeByte(item[2], True)
 *         reader.writeByte(item[1], True)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.Point.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_2__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.Point.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_4__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_5Point_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.Point.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":127
 * 
 * cdef class SixteenPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 2
 * 
 */

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint___cinit__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":128
 * cdef class SixteenPoint(BasePoint):
 *     def __cinit__(self):
 *         self.size = 2             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unsigned int read(self, char * data, int position):
 */
  __pyx_v_self->__pyx_base.size = 2;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":127
 * 
 * cdef class SixteenPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 2
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":130
 *         self.size = 2
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned short newShort
 *         newShort = (<unsigned char>data[position] |
 */

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position) {
  unsigned short __pyx_v_newShort;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":132
 *     cdef inline unsigned int read(self, char * data, int position):
 *         cdef unsigned short newShort
 *         newShort = (<unsigned char>data[position] |             # <<<<<<<<<<<<<<
 *             <unsigned char>data[position + 1] << 8)
 *         cdef unsigned char r, g, b
 */
  __pyx_v_newShort = (((unsigned char)(__pyx_v_data[__pyx_v_position])) | (((unsigned char)(__pyx_v_data[(__pyx_v_position + 1)])) << 8));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":135
 *             <unsigned char>data[position + 1] << 8)
 *         cdef unsigned char r, g, b
 *         r = (newShort & 63488) >> 11             # <<<<<<<<<<<<<<
 *         g = (newShort & 2016) >> 5
 *         b = (newShort & 31)
 */
  __pyx_v_r = ((__pyx_v_newShort & 0xF800) >> 11);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":136
 *         cdef unsigned char r, g, b
 *         r = (newShort & 63488) >> 11
 *         g = (newShort & 2016) >> 5             # <<<<<<<<<<<<<<
 *         b = (newShort & 31)
 *         r = r << 3
 */
  __pyx_v_g = ((__pyx_v_newShort & 0x7E0) >> 5);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":137
 *         r = (newShort & 63488) >> 11
 *         g = (newShort & 2016) >> 5
 *         b = (newShort & 31)             # <<<<<<<<<<<<<<
 *         r = r << 3
 *         g = g << 2
 */
  __pyx_v_b = (__pyx_v_newShort & 31);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":138
 *         g = (newShort & 2016) >> 5
 *         b = (newShort & 31)
 *         r = r << 3             # <<<<<<<<<<<<<<
 *         g = g << 2
 *         b = b << 3
 */
  __pyx_v_r = (__pyx_v_r << 3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":139
 *         b = (newShort & 31)
 *         r = r << 3
 *         g = g << 2             # <<<<<<<<<<<<<<
 *         b = b << 3
 *         return r | g << 8 | b << 16
 */
  __pyx_v_g = (__pyx_v_g << 2);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":140
 *         r = r << 3
 *         g = g << 2
 *         b = b << 3             # <<<<<<<<<<<<<<
 *         return r | g << 8 | b << 16
 * 
 */
  __pyx_v_b = (__pyx_v_b << 3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":141
 *         g = g << 2
 *         b = b << 3
 *         return r | g << 8 | b << 16             # <<<<<<<<<<<<<<
 * 
 *     cdef write(item, ByteReader reader):
 */
  __pyx_r = ((__pyx_v_r | (__pyx_v_g << 8)) | (__pyx_v_b << 16));
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":130
 *         self.size = 2
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned short newShort
 *         newShort = (<unsigned char>data[position] |
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":143
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         r, g, b = item
 *         r = r >> 3
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_item, CYTHON_UNUSED struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":144
 * 
 *     cdef write(item, ByteReader reader):
 *         r, g, b = item             # <<<<<<<<<<<<<<
 *         r = r >> 3
 *         g = g >> 2
 */
  if ((likely(PyTuple_CheckExact(((PyObject *)__pyx_v_item)))) || (PyList_CheckExact(((PyObject *)__pyx_v_item)))) {
    PyObject* sequence = ((PyObject *)__pyx_v_item);
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 144, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(((PyObject *)__pyx_v_item)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_g = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":145
 *     cdef write(item, ByteReader reader):
 *         r, g, b = item
 *         r = r >> 3             # <<<<<<<<<<<<<<
 *         g = g >> 2
 *         b = b >> 3
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_r, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":146
 *         r, g, b = item
 *         r = r >> 3
 *         g = g >> 2             # <<<<<<<<<<<<<<
 *         b = b >> 3
 *         r = r << 11
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_g, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_g, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":147
 *         r = r >> 3
 *         g = g >> 2
 *         b = b >> 3             # <<<<<<<<<<<<<<
 *         r = r << 11
 *         g = g << 5
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_b, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":148
 *         g = g >> 2
 *         b = b >> 3
 *         r = r << 11             # <<<<<<<<<<<<<<
 *         g = g << 5
 *         return r | g | b
 */
  __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_v_r, __pyx_int_11, 11, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":149
 *         b = b >> 3
 *         r = r << 11
 *         g = g << 5             # <<<<<<<<<<<<<<
 *         return r | g | b
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_v_g, __pyx_int_5, 5, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_g, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":150
 *         r = r << 11
 *         g = g << 5
 *         return r | g | b             # <<<<<<<<<<<<<<
 * 
 * cdef BasePoint sixteen_point = SixteenPoint()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Or(__pyx_v_r, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Or(__pyx_t_3, __pyx_v_b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":143
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         r, g, b = item
 *         r = r >> 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.SixteenPoint.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_2__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.SixteenPoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_4__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.SixteenPoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":155
 * 
 * cdef class FifteenPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 2
 * 
 */

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint___cinit__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":156
 * cdef class FifteenPoint(BasePoint):
 *     def __cinit__(self):
 *         self.size = 2             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unsigned int read(self, char * data, int position):
 */
  __pyx_v_self->__pyx_base.size = 2;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":155
 * 
 * cdef class FifteenPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 2
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":158
 *         self.size = 2
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned char r, g, b
 *         cdef unsigned short newShort
 */

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position) {
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned short __pyx_v_newShort;
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":161
 *         cdef unsigned char r, g, b
 *         cdef unsigned short newShort
 *         newShort = (<unsigned char>data[position] |             # <<<<<<<<<<<<<<
 *             <unsigned char>data[position + 1] << 8)
 *         r = (newShort & 31744) >> 10
 */
  __pyx_v_newShort = (((unsigned char)(__pyx_v_data[__pyx_v_position])) | (((unsigned char)(__pyx_v_data[(__pyx_v_position + 1)])) << 8));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":163
 *         newShort = (<unsigned char>data[position] |
 *             <unsigned char>data[position + 1] << 8)
 *         r = (newShort & 31744) >> 10             # <<<<<<<<<<<<<<
 *         g = (newShort & 992) >> 5
 *         b = (newShort & 31)
 */
  __pyx_v_r = ((__pyx_v_newShort & 0x7C00) >> 10);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":164
 *             <unsigned char>data[position + 1] << 8)
 *         r = (newShort & 31744) >> 10
 *         g = (newShort & 992) >> 5             # <<<<<<<<<<<<<<
 *         b = (newShort & 31)
 *         r = r << 3
 */
  __pyx_v_g = ((__pyx_v_newShort & 0x3E0) >> 5);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":165
 *         r = (newShort & 31744) >> 10
 *         g = (newShort & 992) >> 5
 *         b = (newShort & 31)             # <<<<<<<<<<<<<<
 *         r = r << 3
 *         g = g << 3
 */
  __pyx_v_b = (__pyx_v_newShort & 31);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":166
 *         g = (newShort & 992) >> 5
 *         b = (newShort & 31)
 *         r = r << 3             # <<<<<<<<<<<<<<
 *         g = g << 3
 *         b = b << 3
 */
  __pyx_v_r = (__pyx_v_r << 3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":167
 *         b = (newShort & 31)
 *         r = r << 3
 *         g = g << 3             # <<<<<<<<<<<<<<
 *         b = b << 3
 *         return r | g << 8 | b << 16
 */
  __pyx_v_g = (__pyx_v_g << 3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":168
 *         r = r << 3
 *         g = g << 3
 *         b = b << 3             # <<<<<<<<<<<<<<
 *         return r | g << 8 | b << 16
 * 
 */
  __pyx_v_b = (__pyx_v_b << 3);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":169
 *         g = g << 3
 *         b = b << 3
 *         return r | g << 8 | b << 16             # <<<<<<<<<<<<<<
 * 
 *     cdef write(item, ByteReader reader):
 */
  __pyx_r = ((__pyx_v_r | (__pyx_v_g << 8)) | (__pyx_v_b << 16));
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":158
 *         self.size = 2
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         cdef unsigned char r, g, b
 *         cdef unsigned short newShort
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":171
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         r, g, b = item
 *         r = r >> 3
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_item, CYTHON_UNUSED struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":172
 * 
 *     cdef write(item, ByteReader reader):
 *         r, g, b = item             # <<<<<<<<<<<<<<
 *         r = r >> 3
 *         g = g >> 3
 */
  if ((likely(PyTuple_CheckExact(((PyObject *)__pyx_v_item)))) || (PyList_CheckExact(((PyObject *)__pyx_v_item)))) {
    PyObject* sequence = ((PyObject *)__pyx_v_item);
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(((PyObject *)__pyx_v_item)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_g = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":173
 *     cdef write(item, ByteReader reader):
 *         r, g, b = item
 *         r = r >> 3             # <<<<<<<<<<<<<<
 *         g = g >> 3
 *         b = b >> 3
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_r, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":174
 *         r, g, b = item
 *         r = r >> 3
 *         g = g >> 3             # <<<<<<<<<<<<<<
 *         b = b >> 3
 *         r = r << 10
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_g, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_g, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":175
 *         r = r >> 3
 *         g = g >> 3
 *         b = b >> 3             # <<<<<<<<<<<<<<
 *         r = r << 10
 *         g = g << 5
 */
  __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_b, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":176
 *         g = g >> 3
 *         b = b >> 3
 *         r = r << 10             # <<<<<<<<<<<<<<
 *         g = g << 5
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_v_r, __pyx_int_10, 10, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":177
 *         b = b >> 3
 *         r = r << 10
 *         g = g << 5             # <<<<<<<<<<<<<<
 * 
 *         return r | g | b
 */
  __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_v_g, __pyx_int_5, 5, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_g, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":179
 *         g = g << 5
 * 
 *         return r | g | b             # <<<<<<<<<<<<<<
 * 
 * cdef BasePoint fifteen_point = FifteenPoint()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Or(__pyx_v_r, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Or(__pyx_t_3, __pyx_v_b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":171
 *         return r | g << 8 | b << 16
 * 
 *     cdef write(item, ByteReader reader):             # <<<<<<<<<<<<<<
 *         r, g, b = item
 *         r = r >> 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.FifteenPoint.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_2__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.FifteenPoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_4__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.FifteenPoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":184
 * 
 * cdef class IndexPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint___cinit__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint___cinit__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":185
 * cdef class IndexPoint(BasePoint):
 *     def __cinit__(self):
 *         self.size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unsigned int read(self, char * data, int position):
 */
  __pyx_v_self->__pyx_base.size = 1;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":184
 * 
 * cdef class IndexPoint(BasePoint):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":187
 *         self.size = 1
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         return <unsigned char>data[position]
 * 
 */

static unsigned int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_read(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, char *__pyx_v_data, int __pyx_v_position) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":188
 * 
 *     cdef inline unsigned int read(self, char * data, int position):
 *         return <unsigned char>data[position]             # <<<<<<<<<<<<<<
 * 
 *     cdef write(self, point, ByteReader reader):
 */
  __pyx_r = ((unsigned char)(__pyx_v_data[__pyx_v_position]));
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":187
 *         self.size = 1
 * 
 *     cdef inline unsigned int read(self, char * data, int position):             # <<<<<<<<<<<<<<
 *         return <unsigned char>data[position]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":190
 *         return <unsigned char>data[position]
 * 
 *     cdef write(self, point, ByteReader reader):             # <<<<<<<<<<<<<<
 *         reader.writeByte(point, True)
 * 
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_write(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, PyObject *__pyx_v_point, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":191
 * 
 *     cdef write(self, point, ByteReader reader):
 *         reader.writeByte(point, True)             # <<<<<<<<<<<<<<
 * 
 * cdef IndexPoint index_point = IndexPoint()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_point, Py_True};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_point, Py_True};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_point);
    __Pyx_GIVEREF(__pyx_v_point);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_point);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, Py_True);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":190
 *         return <unsigned char>data[position]
 * 
 *     cdef write(self, point, ByteReader reader):             # <<<<<<<<<<<<<<
 *         reader.writeByte(point, True)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.IndexPoint.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_2__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.IndexPoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_4__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.IndexPoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":195
 * cdef IndexPoint index_point = IndexPoint()
 * 
 * cdef inline tuple read_rgb(char * data, int width, int height, BasePoint pointClass):             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     points = allocate_memory(width * height * 4, &buf)
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rgb(char *__pyx_v_data, int __pyx_v_width, int __pyx_v_height, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_pointClass) {
  char *__pyx_v_buf;
  PyObject *__pyx_v_points = NULL;
  unsigned int *__pyx_v_c_array;
  CYTHON_UNUSED int __pyx_v_x;
  CYTHON_UNUSED int __pyx_v_y;
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_v_pad;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_rgb", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":197
 * cdef inline tuple read_rgb(char * data, int width, int height, BasePoint pointClass):
 *     cdef char * buf
 *     points = allocate_memory(width * height * 4, &buf)             # <<<<<<<<<<<<<<
 *     cdef unsigned int * c_array = <unsigned int *>buf
 *     cdef int x, y
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory(((__pyx_v_width * __pyx_v_height) * 4), (&__pyx_v_buf)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_points = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":198
 *     cdef char * buf
 *     points = allocate_memory(width * height * 4, &buf)
 *     cdef unsigned int * c_array = <unsigned int *>buf             # <<<<<<<<<<<<<<
 *     cdef int x, y
 *     cdef int n = 0
 */
  __pyx_v_c_array = ((unsigned int *)__pyx_v_buf);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":200
 *     cdef unsigned int * c_array = <unsigned int *>buf
 *     cdef int x, y
 *     cdef int n = 0             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int pad = get_padding(width, pointClass)
 */
  __pyx_v_n = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":201
 *     cdef int x, y
 *     cdef int n = 0
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(width, pointClass)
 *     for y in range(height):
 */
  __pyx_v_i = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":202
 *     cdef int n = 0
 *     cdef int i = 0
 *     cdef int pad = get_padding(width, pointClass)             # <<<<<<<<<<<<<<
 *     for y in range(height):
 *         for x in range(width):
 */
  __pyx_v_pad = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(__pyx_v_width, __pyx_v_pointClass, NULL);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":203
 *     cdef int i = 0
 *     cdef int pad = get_padding(width, pointClass)
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             c_array[i] = pointClass.read(data, n)
 */
  __pyx_t_2 = __pyx_v_height;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_y = __pyx_t_4;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":204
 *     cdef int pad = get_padding(width, pointClass)
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             c_array[i] = pointClass.read(data, n)
 *             n += pointClass.size
 */
    __pyx_t_5 = __pyx_v_width;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_x = __pyx_t_7;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":205
 *     for y in range(height):
 *         for x in range(width):
 *             c_array[i] = pointClass.read(data, n)             # <<<<<<<<<<<<<<
 *             n += pointClass.size
 *             i += 1
 */
      (__pyx_v_c_array[__pyx_v_i]) = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_pointClass->__pyx_vtab)->read(__pyx_v_pointClass, __pyx_v_data, __pyx_v_n);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":206
 *         for x in range(width):
 *             c_array[i] = pointClass.read(data, n)
 *             n += pointClass.size             # <<<<<<<<<<<<<<
 *             i += 1
 *         n += pad * pointClass.size
 */
      __pyx_v_n = (__pyx_v_n + __pyx_v_pointClass->size);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":207
 *             c_array[i] = pointClass.read(data, n)
 *             n += pointClass.size
 *             i += 1             # <<<<<<<<<<<<<<
 *         n += pad * pointClass.size
 *     return points, n
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":208
 *             n += pointClass.size
 *             i += 1
 *         n += pad * pointClass.size             # <<<<<<<<<<<<<<
 *     return points, n
 * 
 */
    __pyx_v_n = (__pyx_v_n + (__pyx_v_pad * __pyx_v_pointClass->size));
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":209
 *             i += 1
 *         n += pad * pointClass.size
 *     return points, n             # <<<<<<<<<<<<<<
 * 
 * cdef inline int get_padding(int width, BasePoint pointClass, int bytes = 2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_points);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":195
 * cdef IndexPoint index_point = IndexPoint()
 * 
 * cdef inline tuple read_rgb(char * data, int width, int height, BasePoint pointClass):             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     points = allocate_memory(width * height * 4, &buf)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.read_rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":211
 *     return points, n
 * 
 * cdef inline int get_padding(int width, BasePoint pointClass, int bytes = 2):             # <<<<<<<<<<<<<<
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)
 */

static CYTHON_INLINE int __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(int __pyx_v_width, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_pointClass, struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding *__pyx_optional_args) {
  int __pyx_v_bytes = ((int)2);
  int __pyx_v_pad;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_padding", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bytes = __pyx_optional_args->bytes;
    }
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":213
 * cdef inline int get_padding(int width, BasePoint pointClass, int bytes = 2):
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)             # <<<<<<<<<<<<<<
 *     if pad == bytes:
 *         pad = 0
 */
  __pyx_v_pad = (__pyx_v_bytes - ((__pyx_v_width * __pyx_v_pointClass->size) % __pyx_v_bytes));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":214
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)
 *     if pad == bytes:             # <<<<<<<<<<<<<<
 *         pad = 0
 *     return <int>ceil(pad / <float>pointClass.size)
 */
  __pyx_t_1 = ((__pyx_v_pad == __pyx_v_bytes) != 0);
  if (__pyx_t_1) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":215
 *     pad = bytes - ((width * pointClass.size) % bytes)
 *     if pad == bytes:
 *         pad = 0             # <<<<<<<<<<<<<<
 *     return <int>ceil(pad / <float>pointClass.size)
 * 
 */
    __pyx_v_pad = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":214
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)
 *     if pad == bytes:             # <<<<<<<<<<<<<<
 *         pad = 0
 *     return <int>ceil(pad / <float>pointClass.size)
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":216
 *     if pad == bytes:
 *         pad = 0
 *     return <int>ceil(pad / <float>pointClass.size)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple read_rle(char * data, int width, int height, BasePoint pointClass):
 */
  __pyx_r = ((int)ceil((__pyx_v_pad / ((float)__pyx_v_pointClass->size))));
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":211
 *     return points, n
 * 
 * cdef inline int get_padding(int width, BasePoint pointClass, int bytes = 2):             # <<<<<<<<<<<<<<
 *     cdef int pad
 *     pad = bytes - ((width * pointClass.size) % bytes)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":218
 *     return <int>ceil(pad / <float>pointClass.size)
 * 
 * cdef inline tuple read_rle(char * data, int width, int height, BasePoint pointClass):             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     cdef int pad = get_padding(width, pointClass)
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rle(char *__pyx_v_data, int __pyx_v_width, int __pyx_v_height, struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_pointClass) {
  char *__pyx_v_buf;
  int __pyx_v_pad;
  PyObject *__pyx_v_points = 0;
  unsigned int *__pyx_v_c_array;
  int __pyx_v_currentPosition;
  int __pyx_v_i;
  int __pyx_v_pos;
  CYTHON_UNUSED int __pyx_v_n;
  unsigned char __pyx_v_command;
  unsigned int __pyx_v_newPoint;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  unsigned char __pyx_t_3;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_rle", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":220
 * cdef inline tuple read_rle(char * data, int width, int height, BasePoint pointClass):
 *     cdef char * buf
 *     cdef int pad = get_padding(width, pointClass)             # <<<<<<<<<<<<<<
 *     cdef bytes points = allocate_memory(width * height * 4, &buf)
 *     cdef unsigned int * c_array = <unsigned int *>buf
 */
  __pyx_v_pad = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(__pyx_v_width, __pyx_v_pointClass, NULL);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":221
 *     cdef char * buf
 *     cdef int pad = get_padding(width, pointClass)
 *     cdef bytes points = allocate_memory(width * height * 4, &buf)             # <<<<<<<<<<<<<<
 *     cdef unsigned int * c_array = <unsigned int *>buf
 *     cdef int currentPosition = 0
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory(((__pyx_v_width * __pyx_v_height) * 4), (&__pyx_v_buf)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_v_points = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":222
 *     cdef int pad = get_padding(width, pointClass)
 *     cdef bytes points = allocate_memory(width * height * 4, &buf)
 *     cdef unsigned int * c_array = <unsigned int *>buf             # <<<<<<<<<<<<<<
 *     cdef int currentPosition = 0
 *     cdef int i = 0
 */
  __pyx_v_c_array = ((unsigned int *)__pyx_v_buf);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":223
 *     cdef bytes points = allocate_memory(width * height * 4, &buf)
 *     cdef unsigned int * c_array = <unsigned int *>buf
 *     cdef int currentPosition = 0             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int pos = 0
 */
  __pyx_v_currentPosition = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":224
 *     cdef unsigned int * c_array = <unsigned int *>buf
 *     cdef int currentPosition = 0
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int pos = 0
 *     cdef int n
 */
  __pyx_v_i = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":225
 *     cdef int currentPosition = 0
 *     cdef int i = 0
 *     cdef int pos = 0             # <<<<<<<<<<<<<<
 *     cdef int n
 *     cdef unsigned char command
 */
  __pyx_v_pos = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":229
 *     cdef unsigned char command
 *     cdef unsigned int newPoint
 *     while 1:             # <<<<<<<<<<<<<<
 *         command = <unsigned char>data[currentPosition]
 *         currentPosition += 1
 */
  while (1) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":230
 *     cdef unsigned int newPoint
 *     while 1:
 *         command = <unsigned char>data[currentPosition]             # <<<<<<<<<<<<<<
 *         currentPosition += 1
 * 
 */
    __pyx_v_command = ((unsigned char)(__pyx_v_data[__pyx_v_currentPosition]));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":231
 *     while 1:
 *         command = <unsigned char>data[currentPosition]
 *         currentPosition += 1             # <<<<<<<<<<<<<<
 * 
 *         if command == 0:
 */
    __pyx_v_currentPosition = (__pyx_v_currentPosition + 1);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":233
 *         currentPosition += 1
 * 
 *         if command == 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = ((__pyx_v_command == 0) != 0);
    if (__pyx_t_2) {

      /* "mmfparser/data/chunkloaders/imagebank.pyx":234
 * 
 *         if command == 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if command > 128:
 */
      goto __pyx_L4_break;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":233
 *         currentPosition += 1
 * 
 *         if command == 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":236
 *             break
 * 
 *         if command > 128:             # <<<<<<<<<<<<<<
 *             command -= 128
 *             for n in range(command):
 */
    __pyx_t_2 = ((__pyx_v_command > 0x80) != 0);
    if (__pyx_t_2) {

      /* "mmfparser/data/chunkloaders/imagebank.pyx":237
 * 
 *         if command > 128:
 *             command -= 128             # <<<<<<<<<<<<<<
 *             for n in range(command):
 *                 if pos % (width + pad) < width:
 */
      __pyx_v_command = (__pyx_v_command - 0x80);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":238
 *         if command > 128:
 *             command -= 128
 *             for n in range(command):             # <<<<<<<<<<<<<<
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = pointClass.read(data, currentPosition)
 */
      __pyx_t_3 = __pyx_v_command;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_n = __pyx_t_5;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":239
 *             command -= 128
 *             for n in range(command):
 *                 if pos % (width + pad) < width:             # <<<<<<<<<<<<<<
 *                     c_array[i] = pointClass.read(data, currentPosition)
 *                     i += 1
 */
        __pyx_t_2 = (((__pyx_v_pos % (__pyx_v_width + __pyx_v_pad)) < __pyx_v_width) != 0);
        if (__pyx_t_2) {

          /* "mmfparser/data/chunkloaders/imagebank.pyx":240
 *             for n in range(command):
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = pointClass.read(data, currentPosition)             # <<<<<<<<<<<<<<
 *                     i += 1
 *                 pos += 1
 */
          (__pyx_v_c_array[__pyx_v_i]) = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_pointClass->__pyx_vtab)->read(__pyx_v_pointClass, __pyx_v_data, __pyx_v_currentPosition);

          /* "mmfparser/data/chunkloaders/imagebank.pyx":241
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = pointClass.read(data, currentPosition)
 *                     i += 1             # <<<<<<<<<<<<<<
 *                 pos += 1
 *                 currentPosition += pointClass.size
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "mmfparser/data/chunkloaders/imagebank.pyx":239
 *             command -= 128
 *             for n in range(command):
 *                 if pos % (width + pad) < width:             # <<<<<<<<<<<<<<
 *                     c_array[i] = pointClass.read(data, currentPosition)
 *                     i += 1
 */
        }

        /* "mmfparser/data/chunkloaders/imagebank.pyx":242
 *                     c_array[i] = pointClass.read(data, currentPosition)
 *                     i += 1
 *                 pos += 1             # <<<<<<<<<<<<<<
 *                 currentPosition += pointClass.size
 *         else:
 */
        __pyx_v_pos = (__pyx_v_pos + 1);

        /* "mmfparser/data/chunkloaders/imagebank.pyx":243
 *                     i += 1
 *                 pos += 1
 *                 currentPosition += pointClass.size             # <<<<<<<<<<<<<<
 *         else:
 *             newPoint = pointClass.read(data, currentPosition)
 */
        __pyx_v_currentPosition = (__pyx_v_currentPosition + __pyx_v_pointClass->size);
      }

      /* "mmfparser/data/chunkloaders/imagebank.pyx":236
 *             break
 * 
 *         if command > 128:             # <<<<<<<<<<<<<<
 *             command -= 128
 *             for n in range(command):
 */
      goto __pyx_L6;
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":245
 *                 currentPosition += pointClass.size
 *         else:
 *             newPoint = pointClass.read(data, currentPosition)             # <<<<<<<<<<<<<<
 *             for n in range(command):
 *                 if pos % (width + pad) < width:
 */
    /*else*/ {
      __pyx_v_newPoint = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_pointClass->__pyx_vtab)->read(__pyx_v_pointClass, __pyx_v_data, __pyx_v_currentPosition);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":246
 *         else:
 *             newPoint = pointClass.read(data, currentPosition)
 *             for n in range(command):             # <<<<<<<<<<<<<<
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = newPoint
 */
      __pyx_t_3 = __pyx_v_command;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_n = __pyx_t_5;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":247
 *             newPoint = pointClass.read(data, currentPosition)
 *             for n in range(command):
 *                 if pos % (width + pad) < width:             # <<<<<<<<<<<<<<
 *                     c_array[i] = newPoint
 *                     i += 1
 */
        __pyx_t_2 = (((__pyx_v_pos % (__pyx_v_width + __pyx_v_pad)) < __pyx_v_width) != 0);
        if (__pyx_t_2) {

          /* "mmfparser/data/chunkloaders/imagebank.pyx":248
 *             for n in range(command):
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = newPoint             # <<<<<<<<<<<<<<
 *                     i += 1
 *                 pos += 1
 */
          (__pyx_v_c_array[__pyx_v_i]) = __pyx_v_newPoint;

          /* "mmfparser/data/chunkloaders/imagebank.pyx":249
 *                 if pos % (width + pad) < width:
 *                     c_array[i] = newPoint
 *                     i += 1             # <<<<<<<<<<<<<<
 *                 pos += 1
 *             currentPosition += pointClass.size
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "mmfparser/data/chunkloaders/imagebank.pyx":247
 *             newPoint = pointClass.read(data, currentPosition)
 *             for n in range(command):
 *                 if pos % (width + pad) < width:             # <<<<<<<<<<<<<<
 *                     c_array[i] = newPoint
 *                     i += 1
 */
        }

        /* "mmfparser/data/chunkloaders/imagebank.pyx":250
 *                     c_array[i] = newPoint
 *                     i += 1
 *                 pos += 1             # <<<<<<<<<<<<<<
 *             currentPosition += pointClass.size
 *     return points, currentPosition
 */
        __pyx_v_pos = (__pyx_v_pos + 1);
      }

      /* "mmfparser/data/chunkloaders/imagebank.pyx":251
 *                     i += 1
 *                 pos += 1
 *             currentPosition += pointClass.size             # <<<<<<<<<<<<<<
 *     return points, currentPosition
 * 
 */
      __pyx_v_currentPosition = (__pyx_v_currentPosition + __pyx_v_pointClass->size);
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":252
 *                 pos += 1
 *             currentPosition += pointClass.size
 *     return points, currentPosition             # <<<<<<<<<<<<<<
 * 
 * cdef inline read_alpha(char * data, int width, int height, int position):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_currentPosition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_points);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":218
 *     return <int>ceil(pad / <float>pointClass.size)
 * 
 * cdef inline tuple read_rle(char * data, int width, int height, BasePoint pointClass):             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     cdef int pad = get_padding(width, pointClass)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.read_rle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":254
 *     return points, currentPosition
 * 
 * cdef inline read_alpha(char * data, int width, int height, int position):             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(width, index_point, 4)
 *     cdef char * buf
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_alpha(char *__pyx_v_data, int __pyx_v_width, int __pyx_v_height, int __pyx_v_position) {
  int __pyx_v_pad;
  char *__pyx_v_buf;
  PyObject *__pyx_v_points = NULL;
  int __pyx_v_i;
  int __pyx_v_n;
  CYTHON_UNUSED int __pyx_v_x;
  CYTHON_UNUSED int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alpha", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":255
 * 
 * cdef inline read_alpha(char * data, int width, int height, int position):
 *     cdef int pad = get_padding(width, index_point, 4)             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     points = allocate_memory(width * height, &buf)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.bytes = 4;
  __pyx_t_2 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(__pyx_v_width, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_1), &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pad = __pyx_t_2;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":257
 *     cdef int pad = get_padding(width, index_point, 4)
 *     cdef char * buf
 *     points = allocate_memory(width * height, &buf)             # <<<<<<<<<<<<<<
 *     cdef int i, n, x, y
 *     n = i = 0
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_width * __pyx_v_height), (&__pyx_v_buf)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_points = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":259
 *     points = allocate_memory(width * height, &buf)
 *     cdef int i, n, x, y
 *     n = i = 0             # <<<<<<<<<<<<<<
 *     for y in range(height):
 *         for x in range(width):
 */
  __pyx_v_n = 0;
  __pyx_v_i = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":260
 *     cdef int i, n, x, y
 *     n = i = 0
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             buf[i] = data[n + position]
 */
  __pyx_t_2 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":261
 *     n = i = 0
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             buf[i] = data[n + position]
 *             n += 1
 */
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":262
 *     for y in range(height):
 *         for x in range(width):
 *             buf[i] = data[n + position]             # <<<<<<<<<<<<<<
 *             n += 1
 *             i += 1
 */
      (__pyx_v_buf[__pyx_v_i]) = (__pyx_v_data[(__pyx_v_n + __pyx_v_position)]);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":263
 *         for x in range(width):
 *             buf[i] = data[n + position]
 *             n += 1             # <<<<<<<<<<<<<<
 *             i += 1
 *         n += pad
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":264
 *             buf[i] = data[n + position]
 *             n += 1
 *             i += 1             # <<<<<<<<<<<<<<
 *         n += pad
 *     return points
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":265
 *             n += 1
 *             i += 1
 *         n += pad             # <<<<<<<<<<<<<<
 *     return points
 * 
 */
    __pyx_v_n = (__pyx_v_n + __pyx_v_pad);
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":266
 *             i += 1
 *         n += pad
 *     return points             # <<<<<<<<<<<<<<
 * 
 * cdef inline generate_alpha(ImageItem item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_r = __pyx_v_points;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":254
 *     return points, currentPosition
 * 
 * cdef inline read_alpha(char * data, int width, int height, int position):             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(width, index_point, 4)
 *     cdef char * buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.read_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":268
 *     return points
 * 
 * cdef inline generate_alpha(ImageItem item):             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(item.width, index_point, 4)
 *     cdef int i, n, x, y
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_alpha(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_item) {
  int __pyx_v_pad;
  int __pyx_v_i;
  int __pyx_v_n;
  CYTHON_UNUSED int __pyx_v_x;
  CYTHON_UNUSED int __pyx_v_y;
  char *__pyx_v_alpha;
  char *__pyx_v_buf;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_9mmfparser_4data_12chunkloaders_9imagebank_get_padding __pyx_t_3;
  char *__pyx_t_4;
  short __pyx_t_5;
  short __pyx_t_6;
  short __pyx_t_7;
  short __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_alpha", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":269
 * 
 * cdef inline generate_alpha(ImageItem item):
 *     cdef int pad = get_padding(item.width, index_point, 4)             # <<<<<<<<<<<<<<
 *     cdef int i, n, x, y
 *     cdef char * alpha = item.alpha
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.bytes = 4;
  __pyx_t_2 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(__pyx_v_item->width, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_1), &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pad = __pyx_t_2;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":271
 *     cdef int pad = get_padding(item.width, index_point, 4)
 *     cdef int i, n, x, y
 *     cdef char * alpha = item.alpha             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     points = allocate_memory(item.width * item.height + pad * item.height, &buf)
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_item->alpha); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_v_alpha = __pyx_t_4;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":273
 *     cdef char * alpha = item.alpha
 *     cdef char * buf
 *     points = allocate_memory(item.width * item.height + pad * item.height, &buf)             # <<<<<<<<<<<<<<
 *     i = n = 0
 *     for y in range(item.height):
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory(((__pyx_v_item->width * __pyx_v_item->height) + (__pyx_v_pad * __pyx_v_item->height)), (&__pyx_v_buf)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_points = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":274
 *     cdef char * buf
 *     points = allocate_memory(item.width * item.height + pad * item.height, &buf)
 *     i = n = 0             # <<<<<<<<<<<<<<
 *     for y in range(item.height):
 *         for x in range(item.width):
 */
  __pyx_v_i = 0;
  __pyx_v_n = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":275
 *     points = allocate_memory(item.width * item.height + pad * item.height, &buf)
 *     i = n = 0
 *     for y in range(item.height):             # <<<<<<<<<<<<<<
 *         for x in range(item.width):
 *             buf[n] = alpha[i]
 */
  __pyx_t_5 = __pyx_v_item->height;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_6; __pyx_t_2+=1) {
    __pyx_v_y = __pyx_t_2;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":276
 *     i = n = 0
 *     for y in range(item.height):
 *         for x in range(item.width):             # <<<<<<<<<<<<<<
 *             buf[n] = alpha[i]
 *             i += 1
 */
    __pyx_t_7 = __pyx_v_item->width;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_x = __pyx_t_9;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":277
 *     for y in range(item.height):
 *         for x in range(item.width):
 *             buf[n] = alpha[i]             # <<<<<<<<<<<<<<
 *             i += 1
 *             n += 1
 */
      (__pyx_v_buf[__pyx_v_n]) = (__pyx_v_alpha[__pyx_v_i]);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":278
 *         for x in range(item.width):
 *             buf[n] = alpha[i]
 *             i += 1             # <<<<<<<<<<<<<<
 *             n += 1
 *         n += pad
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":279
 *             buf[n] = alpha[i]
 *             i += 1
 *             n += 1             # <<<<<<<<<<<<<<
 *         n += pad
 *     return points
 */
      __pyx_v_n = (__pyx_v_n + 1);
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":280
 *             i += 1
 *             n += 1
 *         n += pad             # <<<<<<<<<<<<<<
 *     return points
 * 
 */
    __pyx_v_n = (__pyx_v_n + __pyx_v_pad);
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":281
 *             n += 1
 *         n += pad
 *     return points             # <<<<<<<<<<<<<<
 * 
 * cdef inline generate_image(ImageItem item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_r = __pyx_v_points;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":268
 *     return points
 * 
 * cdef inline generate_alpha(ImageItem item):             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(item.width, index_point, 4)
 *     cdef int i, n, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.generate_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":283
 *     return points
 * 
 * cdef inline generate_image(ImageItem item):             # <<<<<<<<<<<<<<
 *     cdef int x, y
 *     cdef int n = 0
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_image(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_item) {
  CYTHON_UNUSED int __pyx_v_x;
  CYTHON_UNUSED int __pyx_v_y;
  int __pyx_v_n;
  int __pyx_v_i;
  char *__pyx_v_image;
  int __pyx_v_pad;
  char *__pyx_v_buf;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  short __pyx_t_3;
  short __pyx_t_4;
  int __pyx_t_5;
  short __pyx_t_6;
  short __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_image", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":285
 * cdef inline generate_image(ImageItem item):
 *     cdef int x, y
 *     cdef int n = 0             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef char * image = item.image
 */
  __pyx_v_n = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":286
 *     cdef int x, y
 *     cdef int n = 0
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef char * image = item.image
 *     cdef int pad = get_padding(item.width, point_instance)
 */
  __pyx_v_i = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":287
 *     cdef int n = 0
 *     cdef int i = 0
 *     cdef char * image = item.image             # <<<<<<<<<<<<<<
 *     cdef int pad = get_padding(item.width, point_instance)
 *     cdef char * buf
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_item->image); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_v_image = __pyx_t_1;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":288
 *     cdef int i = 0
 *     cdef char * image = item.image
 *     cdef int pad = get_padding(item.width, point_instance)             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     points = allocate_memory((item.width * item.height + pad * item.height
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pad = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_get_padding(__pyx_v_item->width, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_2), NULL);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":290
 *     cdef int pad = get_padding(item.width, point_instance)
 *     cdef char * buf
 *     points = allocate_memory((item.width * item.height + pad * item.height             # <<<<<<<<<<<<<<
 *         ) * point_instance.size, &buf)
 *     for y in range(item.height):
 */
  __pyx_t_2 = __pyx_f_9mmfparser_6common_allocate_memory((((__pyx_v_item->width * __pyx_v_item->height) + (__pyx_v_pad * __pyx_v_item->height)) * __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance->size), (&__pyx_v_buf)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":292
 *     points = allocate_memory((item.width * item.height + pad * item.height
 *         ) * point_instance.size, &buf)
 *     for y in range(item.height):             # <<<<<<<<<<<<<<
 *         for x in range(item.width):
 *             buf[n] = image[i+2]
 */
  __pyx_t_3 = __pyx_v_item->height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":293
 *         ) * point_instance.size, &buf)
 *     for y in range(item.height):
 *         for x in range(item.width):             # <<<<<<<<<<<<<<
 *             buf[n] = image[i+2]
 *             buf[n+1] = image[i+1]
 */
    __pyx_t_6 = __pyx_v_item->width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":294
 *     for y in range(item.height):
 *         for x in range(item.width):
 *             buf[n] = image[i+2]             # <<<<<<<<<<<<<<
 *             buf[n+1] = image[i+1]
 *             buf[n+2] = image[i]
 */
      (__pyx_v_buf[__pyx_v_n]) = (__pyx_v_image[(__pyx_v_i + 2)]);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":295
 *         for x in range(item.width):
 *             buf[n] = image[i+2]
 *             buf[n+1] = image[i+1]             # <<<<<<<<<<<<<<
 *             buf[n+2] = image[i]
 *             i += 4
 */
      (__pyx_v_buf[(__pyx_v_n + 1)]) = (__pyx_v_image[(__pyx_v_i + 1)]);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":296
 *             buf[n] = image[i+2]
 *             buf[n+1] = image[i+1]
 *             buf[n+2] = image[i]             # <<<<<<<<<<<<<<
 *             i += 4
 *             n += 3
 */
      (__pyx_v_buf[(__pyx_v_n + 2)]) = (__pyx_v_image[__pyx_v_i]);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":297
 *             buf[n+1] = image[i+1]
 *             buf[n+2] = image[i]
 *             i += 4             # <<<<<<<<<<<<<<
 *             n += 3
 *         n += pad * point_instance.size
 */
      __pyx_v_i = (__pyx_v_i + 4);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":298
 *             buf[n+2] = image[i]
 *             i += 4
 *             n += 3             # <<<<<<<<<<<<<<
 *         n += pad * point_instance.size
 *     return points
 */
      __pyx_v_n = (__pyx_v_n + 3);
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":299
 *             i += 4
 *             n += 3
 *         n += pad * point_instance.size             # <<<<<<<<<<<<<<
 *     return points
 * 
 */
    __pyx_v_n = (__pyx_v_n + (__pyx_v_pad * __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance->size));
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":300
 *             n += 3
 *         n += pad * point_instance.size
 *     return points             # <<<<<<<<<<<<<<
 * 
 * # def generate_alpha(ImageItem item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_r = __pyx_v_points;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":283
 *     return points
 * 
 * cdef inline generate_image(ImageItem item):             # <<<<<<<<<<<<<<
 *     cdef int x, y
 *     cdef int n = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.generate_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":362
 *         size_t pos
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.flags = IMAGE_FLAGS.copy()
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_1initialize)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":363
 * 
 *     cpdef initialize(self):
 *         self.flags = IMAGE_FLAGS.copy()             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_IMAGE_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->flags);
  __Pyx_DECREF(__pyx_v_self->flags);
  __pyx_v_self->flags = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":362
 *         size_t pos
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.flags = IMAGE_FLAGS.copy()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":365
 *         self.flags = IMAGE_FLAGS.copy()
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.handle = reader.readInt()
 *         cdef bint load_now = self.settings.get('loadImages', True)
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  int __pyx_v_load_now;
  int __pyx_v_old;
  int __pyx_v_debug;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3read)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_reader)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":366
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.handle = reader.readInt()             # <<<<<<<<<<<<<<
 *         cdef bint load_now = self.settings.get('loadImages', True)
 *         self.reader = reader
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->handle = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":367
 *     cpdef read(self, ByteReader reader):
 *         self.handle = reader.readInt()
 *         cdef bint load_now = self.settings.get('loadImages', True)             # <<<<<<<<<<<<<<
 *         self.reader = reader
 *         self.pos = reader.tell()
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_loadImages, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_load_now = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":368
 *         self.handle = reader.readInt()
 *         cdef bint load_now = self.settings.get('loadImages', True)
 *         self.reader = reader             # <<<<<<<<<<<<<<
 *         self.pos = reader.tell()
 *         if load_now:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
  __Pyx_GOTREF(__pyx_v_self->reader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reader));
  __pyx_v_self->reader = __pyx_v_reader;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":369
 *         cdef bint load_now = self.settings.get('loadImages', True)
 *         self.reader = reader
 *         self.pos = reader.tell()             # <<<<<<<<<<<<<<
 *         if load_now:
 *             self.load()
 */
  __pyx_v_self->pos = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->tell(__pyx_v_reader, 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":370
 *         self.reader = reader
 *         self.pos = reader.tell()
 *         if load_now:             # <<<<<<<<<<<<<<
 *             self.load()
 *             return
 */
  __pyx_t_6 = (__pyx_v_load_now != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":371
 *         self.pos = reader.tell()
 *         if load_now:
 *             self.load()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self->__pyx_base.__pyx_vtab)->load(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":372
 *         if load_now:
 *             self.load()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef bint old = self.settings.get('old', False)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":370
 *         self.reader = reader
 *         self.pos = reader.tell()
 *         if load_now:             # <<<<<<<<<<<<<<
 *             self.load()
 *             return
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":374
 *             return
 * 
 *         cdef bint old = self.settings.get('old', False)             # <<<<<<<<<<<<<<
 *         if old:
 *             raise NotImplementedError('not supported')
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 374, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_old, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":375
 * 
 *         cdef bint old = self.settings.get('old', False)
 *         if old:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('not supported')
 * 
 */
  __pyx_t_6 = (__pyx_v_old != 0);
  if (unlikely(__pyx_t_6)) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":376
 *         cdef bint old = self.settings.get('old', False)
 *         if old:
 *             raise NotImplementedError('not supported')             # <<<<<<<<<<<<<<
 * 
 *         cdef bint debug = self.settings.get('debug', False)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 376, __pyx_L1_error)

    /* "mmfparser/data/chunkloaders/imagebank.pyx":375
 * 
 *         cdef bint old = self.settings.get('old', False)
 *         if old:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('not supported')
 * 
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":378
 *             raise NotImplementedError('not supported')
 * 
 *         cdef bint debug = self.settings.get('debug', False)             # <<<<<<<<<<<<<<
 *         cdef int size
 *         if debug:
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 378, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_debug, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_debug = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":380
 *         cdef bint debug = self.settings.get('debug', False)
 *         cdef int size
 *         if debug:             # <<<<<<<<<<<<<<
 *             reader.skipBytes(8)
 *             size = reader.readInt(True)
 */
  __pyx_t_6 = (__pyx_v_debug != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":381
 *         cdef int size
 *         if debug:
 *             reader.skipBytes(8)             # <<<<<<<<<<<<<<
 *             size = reader.readInt(True)
 *             reader.skipBytes(size + 20)
 */
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->skipBytes(__pyx_v_reader, 8, 0));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":382
 *         if debug:
 *             reader.skipBytes(8)
 *             size = reader.readInt(True)             # <<<<<<<<<<<<<<
 *             reader.skipBytes(size + 20)
 *         else:
 */
    __pyx_t_7.__pyx_n = 1;
    __pyx_t_7.asUnsigned = 1;
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_size = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":383
 *             reader.skipBytes(8)
 *             size = reader.readInt(True)
 *             reader.skipBytes(size + 20)             # <<<<<<<<<<<<<<
 *         else:
 *             reader.skipBytes(4)
 */
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->skipBytes(__pyx_v_reader, (__pyx_v_size + 20), 0));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":380
 *         cdef bint debug = self.settings.get('debug', False)
 *         cdef int size
 *         if debug:             # <<<<<<<<<<<<<<
 *             reader.skipBytes(8)
 *             size = reader.readInt(True)
 */
    goto __pyx_L5;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":385
 *             reader.skipBytes(size + 20)
 *         else:
 *             reader.skipBytes(4)             # <<<<<<<<<<<<<<
 *             size = reader.readInt(True)
 *             reader.skipBytes(size)
 */
  /*else*/ {
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->skipBytes(__pyx_v_reader, 4, 0));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":386
 *         else:
 *             reader.skipBytes(4)
 *             size = reader.readInt(True)             # <<<<<<<<<<<<<<
 *             reader.skipBytes(size)
 * 
 */
    __pyx_t_7.__pyx_n = 1;
    __pyx_t_7.asUnsigned = 1;
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_size = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":387
 *             reader.skipBytes(4)
 *             size = reader.readInt(True)
 *             reader.skipBytes(size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef load(self):
 */
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->skipBytes(__pyx_v_reader, __pyx_v_size, 0));
  }
  __pyx_L5:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":365
 *         self.flags = IMAGE_FLAGS.copy()
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.handle = reader.readInt()
 *         cdef bint load_now = self.settings.get('loadImages', True)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) __PYX_ERR(0, 365, __pyx_L1_error)
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_2read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_2read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":389
 *             reader.skipBytes(size)
 * 
 *     cpdef load(self):             # <<<<<<<<<<<<<<
 *         cdef ByteReader reader = self.reader
 *         if reader is None:
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_load(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader = 0;
  int __pyx_v_old;
  int __pyx_v_debug;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_newReader = 0;
  int __pyx_v_start;
  int __pyx_v_size;
  int __pyx_v_decompressed;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v_pointClass = 0;
  char *__pyx_v_data;
  int __pyx_v_width;
  int __pyx_v_height;
  PyObject *__pyx_v_code = NULL;
  PyObject *__pyx_v_readerData = NULL;
  int __pyx_v_alphaSize;
  int __pyx_v_imageSize;
  PyObject *__pyx_v_image = NULL;
  PyObject *__pyx_v_bytesRead = NULL;
  int __pyx_v_pad;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt __pyx_t_8;
  short __pyx_t_9;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte __pyx_t_10;
  short __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5load)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":390
 * 
 *     cpdef load(self):
 *         cdef ByteReader reader = self.reader             # <<<<<<<<<<<<<<
 *         if reader is None:
 *             return
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->reader);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":391
 *     cpdef load(self):
 *         cdef ByteReader reader = self.reader
 *         if reader is None:             # <<<<<<<<<<<<<<
 *             return
 *         reader.seek(self.pos)
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_reader) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":392
 *         cdef ByteReader reader = self.reader
 *         if reader is None:
 *             return             # <<<<<<<<<<<<<<
 *         reader.seek(self.pos)
 *         self.reader = None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":391
 *     cpdef load(self):
 *         cdef ByteReader reader = self.reader
 *         if reader is None:             # <<<<<<<<<<<<<<
 *             return
 *         reader.seek(self.pos)
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":393
 *         if reader is None:
 *             return
 *         reader.seek(self.pos)             # <<<<<<<<<<<<<<
 *         self.reader = None
 * 
 */
  (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->seek(__pyx_v_reader, __pyx_v_self->pos, 0, NULL));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":394
 *             return
 *         reader.seek(self.pos)
 *         self.reader = None             # <<<<<<<<<<<<<<
 * 
 *         cdef bint old = self.settings.get('old', False)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->reader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reader));
  __pyx_v_self->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)Py_None);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":396
 *         self.reader = None
 * 
 *         cdef bint old = self.settings.get('old', False)             # <<<<<<<<<<<<<<
 *         cdef bint debug = self.settings.get('debug', False)
 *         cdef ByteReader newReader
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_old, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":397
 * 
 *         cdef bint old = self.settings.get('old', False)
 *         cdef bint debug = self.settings.get('debug', False)             # <<<<<<<<<<<<<<
 *         cdef ByteReader newReader
 *         if old:
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 397, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_debug, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_debug = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":399
 *         cdef bint debug = self.settings.get('debug', False)
 *         cdef ByteReader newReader
 *         if old:             # <<<<<<<<<<<<<<
 *             newReader = onepointfive.decompress(reader)
 *         elif debug:
 */
  __pyx_t_6 = (__pyx_v_old != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":400
 *         cdef ByteReader newReader
 *         if old:
 *             newReader = onepointfive.decompress(reader)             # <<<<<<<<<<<<<<
 *         elif debug:
 *             newReader = reader
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_onepointfive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decompress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_reader)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) __PYX_ERR(0, 400, __pyx_L1_error)
    __pyx_v_newReader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":399
 *         cdef bint debug = self.settings.get('debug', False)
 *         cdef ByteReader newReader
 *         if old:             # <<<<<<<<<<<<<<
 *             newReader = onepointfive.decompress(reader)
 *         elif debug:
 */
    goto __pyx_L4;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":401
 *         if old:
 *             newReader = onepointfive.decompress(reader)
 *         elif debug:             # <<<<<<<<<<<<<<
 *             newReader = reader
 *         else:
 */
  __pyx_t_6 = (__pyx_v_debug != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":402
 *             newReader = onepointfive.decompress(reader)
 *         elif debug:
 *             newReader = reader             # <<<<<<<<<<<<<<
 *         else:
 *             newReader = zlibdata.decompress(reader)
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_reader));
    __pyx_v_newReader = __pyx_v_reader;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":401
 *         if old:
 *             newReader = onepointfive.decompress(reader)
 *         elif debug:             # <<<<<<<<<<<<<<
 *             newReader = reader
 *         else:
 */
    goto __pyx_L4;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":404
 *             newReader = reader
 *         else:
 *             newReader = zlibdata.decompress(reader)             # <<<<<<<<<<<<<<
 * 
 *         start = newReader.tell()
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_zlibdata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decompress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_reader)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_reader));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) __PYX_ERR(0, 404, __pyx_L1_error)
    __pyx_v_newReader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":406
 *             newReader = zlibdata.decompress(reader)
 * 
 *         start = newReader.tell()             # <<<<<<<<<<<<<<
 * 
 *         if old:
 */
  __pyx_v_start = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->tell(__pyx_v_newReader, 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":408
 *         start = newReader.tell()
 * 
 *         if old:             # <<<<<<<<<<<<<<
 *             self.checksum = newReader.readShort()
 *         else:
 */
  __pyx_t_6 = (__pyx_v_old != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":409
 * 
 *         if old:
 *             self.checksum = newReader.readShort()             # <<<<<<<<<<<<<<
 *         else:
 *             self.checksum = newReader.readInt()
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L1_error)
    __pyx_v_self->checksum = __pyx_t_7;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":408
 *         start = newReader.tell()
 * 
 *         if old:             # <<<<<<<<<<<<<<
 *             self.checksum = newReader.readShort()
 *         else:
 */
    goto __pyx_L5;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":411
 *             self.checksum = newReader.readShort()
 *         else:
 *             self.checksum = newReader.readInt()             # <<<<<<<<<<<<<<
 *         self.references = newReader.readInt()
 *         cdef int size = newReader.readInt(True)
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readInt(__pyx_v_newReader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->checksum = __pyx_t_7;
  }
  __pyx_L5:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":412
 *         else:
 *             self.checksum = newReader.readInt()
 *         self.references = newReader.readInt()             # <<<<<<<<<<<<<<
 *         cdef int size = newReader.readInt(True)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readInt(__pyx_v_newReader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->references = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":413
 *             self.checksum = newReader.readInt()
 *         self.references = newReader.readInt()
 *         cdef int size = newReader.readInt(True)             # <<<<<<<<<<<<<<
 * 
 *         if debug:
 */
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.asUnsigned = 1;
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readInt(__pyx_v_newReader, 0, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":415
 *         cdef int size = newReader.readInt(True)
 * 
 *         if debug:             # <<<<<<<<<<<<<<
 *             newReader = newReader.readReader(size + 20)
 *         self.width = newReader.readShort()
 */
  __pyx_t_6 = (__pyx_v_debug != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":416
 * 
 *         if debug:
 *             newReader = newReader.readReader(size + 20)             # <<<<<<<<<<<<<<
 *         self.width = newReader.readShort()
 *         self.height = newReader.readShort()
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readReader(__pyx_v_newReader, (__pyx_v_size + 20), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_newReader, ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":415
 *         cdef int size = newReader.readInt(True)
 * 
 *         if debug:             # <<<<<<<<<<<<<<
 *             newReader = newReader.readReader(size + 20)
 *         self.width = newReader.readShort()
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":417
 *         if debug:
 *             newReader = newReader.readReader(size + 20)
 *         self.width = newReader.readShort()             # <<<<<<<<<<<<<<
 *         self.height = newReader.readShort()
 *         self.graphicMode = newReader.readByte()
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":418
 *             newReader = newReader.readReader(size + 20)
 *         self.width = newReader.readShort()
 *         self.height = newReader.readShort()             # <<<<<<<<<<<<<<
 *         self.graphicMode = newReader.readByte()
 *         self.flags.setFlags(newReader.readByte(True))
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":419
 *         self.width = newReader.readShort()
 *         self.height = newReader.readShort()
 *         self.graphicMode = newReader.readByte()             # <<<<<<<<<<<<<<
 *         self.flags.setFlags(newReader.readByte(True))
 * 
 */
  __pyx_t_9 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readByte(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_9 == ((short)-10) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_v_self->graphicMode = __pyx_t_9;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":420
 *         self.height = newReader.readShort()
 *         self.graphicMode = newReader.readByte()
 *         self.flags.setFlags(newReader.readByte(True))             # <<<<<<<<<<<<<<
 * 
 *         if not old:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->flags, __pyx_n_s_setFlags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10.__pyx_n = 1;
  __pyx_t_10.asUnsigned = 1;
  __pyx_t_9 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readByte(__pyx_v_newReader, 0, &__pyx_t_10); if (unlikely(__pyx_t_9 == ((short)-10) && PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":422
 *         self.flags.setFlags(newReader.readByte(True))
 * 
 *         if not old:             # <<<<<<<<<<<<<<
 *             newReader.skipBytes(2) # imgNotUsed
 *         self.xHotspot = newReader.readShort()
 */
  __pyx_t_6 = ((!(__pyx_v_old != 0)) != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":423
 * 
 *         if not old:
 *             newReader.skipBytes(2) # imgNotUsed             # <<<<<<<<<<<<<<
 *         self.xHotspot = newReader.readShort()
 *         self.yHotspot = newReader.readShort()
 */
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->skipBytes(__pyx_v_newReader, 2, 0));

    /* "mmfparser/data/chunkloaders/imagebank.pyx":422
 *         self.flags.setFlags(newReader.readByte(True))
 * 
 *         if not old:             # <<<<<<<<<<<<<<
 *             newReader.skipBytes(2) # imgNotUsed
 *         self.xHotspot = newReader.readShort()
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":424
 *         if not old:
 *             newReader.skipBytes(2) # imgNotUsed
 *         self.xHotspot = newReader.readShort()             # <<<<<<<<<<<<<<
 *         self.yHotspot = newReader.readShort()
 *         self.actionX = newReader.readShort()
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_v_self->xHotspot = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":425
 *             newReader.skipBytes(2) # imgNotUsed
 *         self.xHotspot = newReader.readShort()
 *         self.yHotspot = newReader.readShort()             # <<<<<<<<<<<<<<
 *         self.actionX = newReader.readShort()
 *         self.actionY = newReader.readShort()
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_v_self->yHotspot = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":426
 *         self.xHotspot = newReader.readShort()
 *         self.yHotspot = newReader.readShort()
 *         self.actionX = newReader.readShort()             # <<<<<<<<<<<<<<
 *         self.actionY = newReader.readShort()
 *         if old:
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
  __pyx_v_self->actionX = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":427
 *         self.yHotspot = newReader.readShort()
 *         self.actionX = newReader.readShort()
 *         self.actionY = newReader.readShort()             # <<<<<<<<<<<<<<
 *         if old:
 *             self.transparent = (0, 0, 0)
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readShort(__pyx_v_newReader, 0, NULL); if (unlikely(__pyx_t_7 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_v_self->actionY = __pyx_t_7;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":428
 *         self.actionX = newReader.readShort()
 *         self.actionY = newReader.readShort()
 *         if old:             # <<<<<<<<<<<<<<
 *             self.transparent = (0, 0, 0)
 *         else:
 */
  __pyx_t_6 = (__pyx_v_old != 0);
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":429
 *         self.actionY = newReader.readShort()
 *         if old:
 *             self.transparent = (0, 0, 0)             # <<<<<<<<<<<<<<
 *         else:
 *             self.transparent = newReader.readColor()
 */
    __Pyx_INCREF(__pyx_tuple__10);
    __Pyx_GIVEREF(__pyx_tuple__10);
    __Pyx_GOTREF(__pyx_v_self->transparent);
    __Pyx_DECREF(__pyx_v_self->transparent);
    __pyx_v_self->transparent = __pyx_tuple__10;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":428
 *         self.actionX = newReader.readShort()
 *         self.actionY = newReader.readShort()
 *         if old:             # <<<<<<<<<<<<<<
 *             self.transparent = (0, 0, 0)
 *         else:
 */
    goto __pyx_L8;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":431
 *             self.transparent = (0, 0, 0)
 *         else:
 *             self.transparent = newReader.readColor()             # <<<<<<<<<<<<<<
 * 
 *         cdef int decompressed
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readColor(__pyx_v_newReader, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->transparent);
    __Pyx_DECREF(__pyx_v_self->transparent);
    __pyx_v_self->transparent = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L8:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":434
 * 
 *         cdef int decompressed
 *         if self.flags['LZX']:             # <<<<<<<<<<<<<<
 *             decompressed = newReader.readInt()
 *             newReader = ByteReader(zlib.decompress(newReader.read()))
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_LZX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":435
 *         cdef int decompressed
 *         if self.flags['LZX']:
 *             decompressed = newReader.readInt()             # <<<<<<<<<<<<<<
 *             newReader = ByteReader(zlib.decompress(newReader.read()))
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->readInt(__pyx_v_newReader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_decompressed = __pyx_t_7;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":436
 *         if self.flags['LZX']:
 *             decompressed = newReader.readInt()
 *             newReader = ByteReader(zlib.decompress(newReader.read()))             # <<<<<<<<<<<<<<
 * 
 *         cdef BasePoint pointClass
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_zlib); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decompress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->read(__pyx_v_newReader, 0, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9mmfparser_10bytereader_ByteReader), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_newReader, ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":434
 * 
 *         cdef int decompressed
 *         if self.flags['LZX']:             # <<<<<<<<<<<<<<
 *             decompressed = newReader.readInt()
 *             newReader = ByteReader(zlib.decompress(newReader.read()))
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":441
 *         cdef char * data
 *         cdef int width, height
 *         width, height = self.width, self.height             # <<<<<<<<<<<<<<
 *         if self.graphicMode == 2:
 *             pointClass = index_point
 */
  __pyx_t_9 = __pyx_v_self->width;
  __pyx_t_11 = __pyx_v_self->height;
  __pyx_v_width = __pyx_t_9;
  __pyx_v_height = __pyx_t_11;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":442
 *         cdef int width, height
 *         width, height = self.width, self.height
 *         if self.graphicMode == 2:             # <<<<<<<<<<<<<<
 *             pointClass = index_point
 *             self.indexed = True
 */
  switch (__pyx_v_self->graphicMode) {
    case 2:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":443
 *         width, height = self.width, self.height
 *         if self.graphicMode == 2:
 *             pointClass = index_point             # <<<<<<<<<<<<<<
 *             self.indexed = True
 *         elif self.graphicMode == 3:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point));
    __pyx_v_pointClass = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":444
 *         if self.graphicMode == 2:
 *             pointClass = index_point
 *             self.indexed = True             # <<<<<<<<<<<<<<
 *         elif self.graphicMode == 3:
 *             pointClass = index_point
 */
    __pyx_v_self->indexed = 1;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":442
 *         cdef int width, height
 *         width, height = self.width, self.height
 *         if self.graphicMode == 2:             # <<<<<<<<<<<<<<
 *             pointClass = index_point
 *             self.indexed = True
 */
    break;
    case 3:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":446
 *             self.indexed = True
 *         elif self.graphicMode == 3:
 *             pointClass = index_point             # <<<<<<<<<<<<<<
 *             self.indexed = True
 *         elif self.graphicMode == 4: # 16 million colors
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point));
    __pyx_v_pointClass = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":447
 *         elif self.graphicMode == 3:
 *             pointClass = index_point
 *             self.indexed = True             # <<<<<<<<<<<<<<
 *         elif self.graphicMode == 4: # 16 million colors
 *             pointClass = point_instance
 */
    __pyx_v_self->indexed = 1;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":445
 *             pointClass = index_point
 *             self.indexed = True
 *         elif self.graphicMode == 3:             # <<<<<<<<<<<<<<
 *             pointClass = index_point
 *             self.indexed = True
 */
    break;
    case 4:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":449
 *             self.indexed = True
 *         elif self.graphicMode == 4: # 16 million colors
 *             pointClass = point_instance             # <<<<<<<<<<<<<<
 *             self.indexed = False
 *         elif self.graphicMode == 6: # 32768 colors
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance));
    __pyx_v_pointClass = __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":450
 *         elif self.graphicMode == 4: # 16 million colors
 *             pointClass = point_instance
 *             self.indexed = False             # <<<<<<<<<<<<<<
 *         elif self.graphicMode == 6: # 32768 colors
 *             pointClass = fifteen_point
 */
    __pyx_v_self->indexed = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":448
 *             pointClass = index_point
 *             self.indexed = True
 *         elif self.graphicMode == 4: # 16 million colors             # <<<<<<<<<<<<<<
 *             pointClass = point_instance
 *             self.indexed = False
 */
    break;
    case 6:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":452
 *             self.indexed = False
 *         elif self.graphicMode == 6: # 32768 colors
 *             pointClass = fifteen_point             # <<<<<<<<<<<<<<
 *             self.indexed = False
 *         elif self.graphicMode == 7: # 65536 colors
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point));
    __pyx_v_pointClass = __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":453
 *         elif self.graphicMode == 6: # 32768 colors
 *             pointClass = fifteen_point
 *             self.indexed = False             # <<<<<<<<<<<<<<
 *         elif self.graphicMode == 7: # 65536 colors
 *             pointClass = sixteen_point
 */
    __pyx_v_self->indexed = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":451
 *             pointClass = point_instance
 *             self.indexed = False
 *         elif self.graphicMode == 6: # 32768 colors             # <<<<<<<<<<<<<<
 *             pointClass = fifteen_point
 *             self.indexed = False
 */
    break;
    case 7:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":455
 *             self.indexed = False
 *         elif self.graphicMode == 7: # 65536 colors
 *             pointClass = sixteen_point             # <<<<<<<<<<<<<<
 *             self.indexed = False
 *         else:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point));
    __pyx_v_pointClass = __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":456
 *         elif self.graphicMode == 7: # 65536 colors
 *             pointClass = sixteen_point
 *             self.indexed = False             # <<<<<<<<<<<<<<
 *         else:
 *             import code
 */
    __pyx_v_self->indexed = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":454
 *             pointClass = fifteen_point
 *             self.indexed = False
 *         elif self.graphicMode == 7: # 65536 colors             # <<<<<<<<<<<<<<
 *             pointClass = sixteen_point
 *             self.indexed = False
 */
    break;
    default:

    /* "mmfparser/data/chunkloaders/imagebank.pyx":458
 *             self.indexed = False
 *         else:
 *             import code             # <<<<<<<<<<<<<<
 *             code.interact(local = locals())
 *             newReader.openEditor()
 */
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_code, 0, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_code = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":459
 *         else:
 *             import code
 *             code.interact(local = locals())             # <<<<<<<<<<<<<<
 *             newReader.openEditor()
 *             raise NotImplementedError('unknown graphic mode: %s'
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_code, __pyx_n_s_interact); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(19); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_alphaSize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_alphaSize, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_v_bytesRead) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_bytesRead, __pyx_v_bytesRead) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    if (__pyx_v_code) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_code, __pyx_v_code) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_data, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_debug); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_debug, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_decompressed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_decompressed, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_height, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_v_image) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_image, __pyx_v_image) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_imageSize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_imageSize, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (((PyObject *)__pyx_v_newReader)) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_newReader, ((PyObject *)__pyx_v_newReader)) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_old); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_old, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_pad); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pad, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (((PyObject *)__pyx_v_pointClass)) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pointClass, ((PyObject *)__pyx_v_pointClass)) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    if (((PyObject *)__pyx_v_reader)) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_reader, ((PyObject *)__pyx_v_reader)) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    if (__pyx_v_readerData) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_readerData, __pyx_v_readerData) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    if (((PyObject *)__pyx_v_self)) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_self, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_size, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_start, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_4) {
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_width, __pyx_t_4) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_local, __pyx_t_2) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":460
 *             import code
 *             code.interact(local = locals())
 *             newReader.openEditor()             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('unknown graphic mode: %s'
 *                                       % self.graphicMode)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_openEditor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":462
 *             newReader.openEditor()
 *             raise NotImplementedError('unknown graphic mode: %s'
 *                                       % self.graphicMode)             # <<<<<<<<<<<<<<
 * 
 *         readerData = newReader.read()
 */
    __pyx_t_2 = __Pyx_PyInt_From_char(__pyx_v_self->graphicMode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_unknown_graphic_mode_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":461
 *             code.interact(local = locals())
 *             newReader.openEditor()
 *             raise NotImplementedError('unknown graphic mode: %s'             # <<<<<<<<<<<<<<
 *                                       % self.graphicMode)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 461, __pyx_L1_error)
    break;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":464
 *                                       % self.graphicMode)
 * 
 *         readerData = newReader.read()             # <<<<<<<<<<<<<<
 *         data = readerData
 *         cdef int alphaSize, imageSize
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->read(__pyx_v_newReader, 0, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_readerData = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":465
 * 
 *         readerData = newReader.read()
 *         data = readerData             # <<<<<<<<<<<<<<
 *         cdef int alphaSize, imageSize
 *         if self.flags['RLE'] or self.flags['RLEW'] or self.flags['RLET']:
 */
  __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_readerData); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
  __pyx_v_data = __pyx_t_12;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":467
 *         data = readerData
 *         cdef int alphaSize, imageSize
 *         if self.flags['RLE'] or self.flags['RLEW'] or self.flags['RLET']:             # <<<<<<<<<<<<<<
 *             image, bytesRead = read_rle(data, width, height, pointClass)
 *             alphaSize = size - bytesRead
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_RLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_RLEW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_RLET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_t_5;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":468
 *         cdef int alphaSize, imageSize
 *         if self.flags['RLE'] or self.flags['RLEW'] or self.flags['RLET']:
 *             image, bytesRead = read_rle(data, width, height, pointClass)             # <<<<<<<<<<<<<<
 *             alphaSize = size - bytesRead
 *         else:
 */
    __pyx_t_2 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rle(__pyx_v_data, __pyx_v_width, __pyx_v_height, __pyx_v_pointClass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(__pyx_t_2 != Py_None)) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 468, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 468, __pyx_L1_error)
    }
    __pyx_v_image = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_bytesRead = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":469
 *         if self.flags['RLE'] or self.flags['RLEW'] or self.flags['RLET']:
 *             image, bytesRead = read_rle(data, width, height, pointClass)
 *             alphaSize = size - bytesRead             # <<<<<<<<<<<<<<
 *         else:
 *             image, imageSize = read_rgb(data, width, height, pointClass)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_bytesRead); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_alphaSize = __pyx_t_7;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":467
 *         data = readerData
 *         cdef int alphaSize, imageSize
 *         if self.flags['RLE'] or self.flags['RLEW'] or self.flags['RLET']:             # <<<<<<<<<<<<<<
 *             image, bytesRead = read_rle(data, width, height, pointClass)
 *             alphaSize = size - bytesRead
 */
    goto __pyx_L10;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":471
 *             alphaSize = size - bytesRead
 *         else:
 *             image, imageSize = read_rgb(data, width, height, pointClass)             # <<<<<<<<<<<<<<
 *             alphaSize = size - imageSize
 *         self.image = image
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_rgb(__pyx_v_data, __pyx_v_width, __pyx_v_height, __pyx_v_pointClass); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 471, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 471, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_image = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_imageSize = __pyx_t_7;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":472
 *         else:
 *             image, imageSize = read_rgb(data, width, height, pointClass)
 *             alphaSize = size - imageSize             # <<<<<<<<<<<<<<
 *         self.image = image
 * 
 */
    __pyx_v_alphaSize = (__pyx_v_size - __pyx_v_imageSize);
  }
  __pyx_L10:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":473
 *             image, imageSize = read_rgb(data, width, height, pointClass)
 *             alphaSize = size - imageSize
 *         self.image = image             # <<<<<<<<<<<<<<
 * 
 *         if self.flags['Alpha']:
 */
  __Pyx_INCREF(__pyx_v_image);
  __Pyx_GIVEREF(__pyx_v_image);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = __pyx_v_image;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":475
 *         self.image = image
 * 
 *         if self.flags['Alpha']:             # <<<<<<<<<<<<<<
 *             pad = (alphaSize - width * height) / height
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_Alpha); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":476
 * 
 *         if self.flags['Alpha']:
 *             pad = (alphaSize - width * height) / height             # <<<<<<<<<<<<<<
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)
 * 
 */
    __pyx_v_pad = ((__pyx_v_alphaSize - (__pyx_v_width * __pyx_v_height)) / __pyx_v_height);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":477
 *         if self.flags['Alpha']:
 *             pad = (alphaSize - width * height) / height
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
    __pyx_t_3 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_read_alpha(__pyx_v_data, __pyx_v_width, __pyx_v_height, (__pyx_v_size - __pyx_v_alphaSize)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->alpha);
    __Pyx_DECREF(__pyx_v_self->alpha);
    __pyx_v_self->alpha = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":475
 *         self.image = image
 * 
 *         if self.flags['Alpha']:             # <<<<<<<<<<<<<<
 *             pad = (alphaSize - width * height) / height
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":389
 *             reader.skipBytes(size)
 * 
 *     cpdef load(self):             # <<<<<<<<<<<<<<
 *         cdef ByteReader reader = self.reader
 *         if reader is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XDECREF((PyObject *)__pyx_v_newReader);
  __Pyx_XDECREF((PyObject *)__pyx_v_pointClass);
  __Pyx_XDECREF(__pyx_v_code);
  __Pyx_XDECREF(__pyx_v_readerData);
  __Pyx_XDECREF(__pyx_v_image);
  __Pyx_XDECREF(__pyx_v_bytesRead);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_4load(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_4load(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_load(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":479
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         cdef bint debug = self.settings.get('debug', False)
 *         dataReader = ByteReader()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_reader) {
  int __pyx_v_debug;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_dataReader = NULL;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_newReader = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __pyx_ctuple_long__and_long__and_long __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":480
 * 
 *     def write(self, reader):
 *         cdef bint debug = self.settings.get('debug', False)             # <<<<<<<<<<<<<<
 *         dataReader = ByteReader()
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_debug, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_debug = __pyx_t_2;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":481
 *     def write(self, reader):
 *         cdef bint debug = self.settings.get('debug', False)
 *         dataReader = ByteReader()             # <<<<<<<<<<<<<<
 * 
 *         dataReader.write(generate_image(self))
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_10bytereader_ByteReader)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataReader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":483
 *         dataReader = ByteReader()
 * 
 *         dataReader.write(generate_image(self))             # <<<<<<<<<<<<<<
 *         if self.alpha is not None:
 *             dataReader.write(generate_alpha(self))
 */
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_image(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 483, __pyx_L1_error)
  (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_dataReader->__pyx_vtab)->write(__pyx_v_dataReader, ((PyObject*)__pyx_t_1), 0));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":484
 * 
 *         dataReader.write(generate_image(self))
 *         if self.alpha is not None:             # <<<<<<<<<<<<<<
 *             dataReader.write(generate_alpha(self))
 * 
 */
  __pyx_t_2 = (__pyx_v_self->alpha != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":485
 *         dataReader.write(generate_image(self))
 *         if self.alpha is not None:
 *             dataReader.write(generate_alpha(self))             # <<<<<<<<<<<<<<
 * 
 *         newReader = ByteReader()
 */
    __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_generate_alpha(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 485, __pyx_L1_error)
    (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_dataReader->__pyx_vtab)->write(__pyx_v_dataReader, ((PyObject*)__pyx_t_1), 0));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":484
 * 
 *         dataReader.write(generate_image(self))
 *         if self.alpha is not None:             # <<<<<<<<<<<<<<
 *             dataReader.write(generate_alpha(self))
 * 
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":487
 *             dataReader.write(generate_alpha(self))
 * 
 *         newReader = ByteReader()             # <<<<<<<<<<<<<<
 *         newReader.writeInt(self.checksum)
 *         newReader.writeInt(self.references)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_10bytereader_ByteReader)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_newReader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":488
 * 
 *         newReader = ByteReader()
 *         newReader.writeInt(self.checksum)             # <<<<<<<<<<<<<<
 *         newReader.writeInt(self.references)
 *         newReader.writeInt(len(dataReader))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeInt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->checksum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":489
 *         newReader = ByteReader()
 *         newReader.writeInt(self.checksum)
 *         newReader.writeInt(self.references)             # <<<<<<<<<<<<<<
 *         newReader.writeInt(len(dataReader))
 *         newReader.writeShort(self.width)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeInt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->references); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":490
 *         newReader.writeInt(self.checksum)
 *         newReader.writeInt(self.references)
 *         newReader.writeInt(len(dataReader))             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.width)
 *         newReader.writeShort(self.height)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeInt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_dataReader)); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":491
 *         newReader.writeInt(self.references)
 *         newReader.writeInt(len(dataReader))
 *         newReader.writeShort(self.width)             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.height)
 *         newReader.writeByte(4)#self.graphicMode)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":492
 *         newReader.writeInt(len(dataReader))
 *         newReader.writeShort(self.width)
 *         newReader.writeShort(self.height)             # <<<<<<<<<<<<<<
 *         newReader.writeByte(4)#self.graphicMode)
 *         # XXX simple hack
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":493
 *         newReader.writeShort(self.width)
 *         newReader.writeShort(self.height)
 *         newReader.writeByte(4)#self.graphicMode)             # <<<<<<<<<<<<<<
 *         # XXX simple hack
 *         if self.flags['Alpha']:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_int_4) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_int_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":495
 *         newReader.writeByte(4)#self.graphicMode)
 *         # XXX simple hack
 *         if self.flags['Alpha']:             # <<<<<<<<<<<<<<
 *             newReader.writeByte(16)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_self->flags, __pyx_n_s_Alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":496
 *         # XXX simple hack
 *         if self.flags['Alpha']:
 *             newReader.writeByte(16)             # <<<<<<<<<<<<<<
 *         else:
 *             newReader.writeByte(0)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_int_16) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_int_16);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":495
 *         newReader.writeByte(4)#self.graphicMode)
 *         # XXX simple hack
 *         if self.flags['Alpha']:             # <<<<<<<<<<<<<<
 *             newReader.writeByte(16)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":498
 *             newReader.writeByte(16)
 *         else:
 *             newReader.writeByte(0)             # <<<<<<<<<<<<<<
 *         newReader.write(<bytes>('\x00\x00'))
 *         newReader.writeShort(self.xHotspot)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_int_0);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":499
 *         else:
 *             newReader.writeByte(0)
 *         newReader.write(<bytes>('\x00\x00'))             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.xHotspot)
 *         newReader.writeShort(self.yHotspot)
 */
  (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->write(__pyx_v_newReader, ((PyObject*)__pyx_kp_s__11), 0));

  /* "mmfparser/data/chunkloaders/imagebank.pyx":500
 *             newReader.writeByte(0)
 *         newReader.write(<bytes>('\x00\x00'))
 *         newReader.writeShort(self.xHotspot)             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.yHotspot)
 *         newReader.writeShort(self.actionX)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":501
 *         newReader.write(<bytes>('\x00\x00'))
 *         newReader.writeShort(self.xHotspot)
 *         newReader.writeShort(self.yHotspot)             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.actionX)
 *         newReader.writeShort(self.actionY)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":502
 *         newReader.writeShort(self.xHotspot)
 *         newReader.writeShort(self.yHotspot)
 *         newReader.writeShort(self.actionX)             # <<<<<<<<<<<<<<
 *         newReader.writeShort(self.actionY)
 *         newReader.writeColor(self.transparent or (0, 0, 0))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->actionX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":503
 *         newReader.writeShort(self.yHotspot)
 *         newReader.writeShort(self.actionX)
 *         newReader.writeShort(self.actionY)             # <<<<<<<<<<<<<<
 *         newReader.writeColor(self.transparent or (0, 0, 0))
 *         newReader.writeReader(dataReader)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->actionY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":504
 *         newReader.writeShort(self.actionX)
 *         newReader.writeShort(self.actionY)
 *         newReader.writeColor(self.transparent or (0, 0, 0))             # <<<<<<<<<<<<<<
 *         newReader.writeReader(dataReader)
 *         print 'Writing Texture to MFA: %s' % (self.handle)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeColor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_self->transparent); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 504, __pyx_L1_error)
  if (!__pyx_t_3) {
  } else {
    __Pyx_INCREF(__pyx_v_self->transparent);
    __pyx_t_5 = __pyx_v_self->transparent;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_8.f0 = 0;
  __pyx_t_8.f1 = 0;
  __pyx_t_8.f2 = 0;
  __pyx_t_6 = __pyx_convert__to_py___pyx_ctuple_long__and_long__and_long(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_L5_bool_binop_done:;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":505
 *         newReader.writeShort(self.actionY)
 *         newReader.writeColor(self.transparent or (0, 0, 0))
 *         newReader.writeReader(dataReader)             # <<<<<<<<<<<<<<
 *         print 'Writing Texture to MFA: %s' % (self.handle)
 *         reader.writeInt(self.handle)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newReader), __pyx_n_s_writeReader); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_dataReader)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_dataReader));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":506
 *         newReader.writeColor(self.transparent or (0, 0, 0))
 *         newReader.writeReader(dataReader)
 *         print 'Writing Texture to MFA: %s' % (self.handle)             # <<<<<<<<<<<<<<
 *         reader.writeInt(self.handle)
 *         if debug:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Writing_Texture_to_MFA_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":507
 *         newReader.writeReader(dataReader)
 *         print 'Writing Texture to MFA: %s' % (self.handle)
 *         reader.writeInt(self.handle)             # <<<<<<<<<<<<<<
 *         if debug:
 *             reader.writeReader(newReader)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeInt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":508
 *         print 'Writing Texture to MFA: %s' % (self.handle)
 *         reader.writeInt(self.handle)
 *         if debug:             # <<<<<<<<<<<<<<
 *             reader.writeReader(newReader)
 *         else:
 */
  __pyx_t_3 = (__pyx_v_debug != 0);
  if (__pyx_t_3) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":509
 *         reader.writeInt(self.handle)
 *         if debug:
 *             reader.writeReader(newReader)             # <<<<<<<<<<<<<<
 *         else:
 *             reader.writeReader(zlibdata.compress(newReader))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeReader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, ((PyObject *)__pyx_v_newReader)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_newReader));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":508
 *         print 'Writing Texture to MFA: %s' % (self.handle)
 *         reader.writeInt(self.handle)
 *         if debug:             # <<<<<<<<<<<<<<
 *             reader.writeReader(newReader)
 *         else:
 */
    goto __pyx_L7;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":511
 *             reader.writeReader(newReader)
 *         else:
 *             reader.writeReader(zlibdata.compress(newReader))             # <<<<<<<<<<<<<<
 * 
 *     def createDisplay(self, frame = None, **kw):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeReader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_zlibdata); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_compress); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_6, ((PyObject *)__pyx_v_newReader)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, ((PyObject *)__pyx_v_newReader));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L7:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":479
 *             self.alpha = read_alpha(data, width, height, size - alphaSize)
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         cdef bint debug = self.settings.get('debug', False)
 *         dataReader = ByteReader()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dataReader);
  __Pyx_XDECREF((PyObject *)__pyx_v_newReader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":513
 *             reader.writeReader(zlibdata.compress(newReader))
 * 
 *     def createDisplay(self, frame = None, **kw):             # <<<<<<<<<<<<<<
 *         foo = createDisplay(self, frame)
 *         self.unload()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_9createDisplay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_9createDisplay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_frame = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createDisplay (wrapper)", 0);
  __pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
  __Pyx_GOTREF(__pyx_v_kw);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kw, values, pos_args, "createDisplay") < 0)) __PYX_ERR(0, 513, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_frame = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createDisplay", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 513, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.createDisplay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8createDisplay(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), __pyx_v_frame, __pyx_v_kw);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_frame, CYTHON_UNUSED PyObject *__pyx_v_kw) {
  PyObject *__pyx_v_foo = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createDisplay", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":514
 * 
 *     def createDisplay(self, frame = None, **kw):
 *         foo = createDisplay(self, frame)             # <<<<<<<<<<<<<<
 *         self.unload()
 *         return foo
 */
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_createDisplay(__pyx_v_self, __pyx_v_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_foo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":515
 *     def createDisplay(self, frame = None, **kw):
 *         foo = createDisplay(self, frame)
 *         self.unload()             # <<<<<<<<<<<<<<
 *         return foo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unload); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":516
 *         foo = createDisplay(self, frame)
 *         self.unload()
 *         return foo             # <<<<<<<<<<<<<<
 * 
 *     def getImageData(self, frame = None, **kw):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_foo);
  __pyx_r = __pyx_v_foo;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":513
 *             reader.writeReader(zlibdata.compress(newReader))
 * 
 *     def createDisplay(self, frame = None, **kw):             # <<<<<<<<<<<<<<
 *         foo = createDisplay(self, frame)
 *         self.unload()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.createDisplay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":518
 *         return foo
 * 
 *     def getImageData(self, frame = None, **kw):             # <<<<<<<<<<<<<<
 *         foo = getImageData(self, frame)
 *         self.unload()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11getImageData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11getImageData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_frame = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getImageData (wrapper)", 0);
  __pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
  __Pyx_GOTREF(__pyx_v_kw);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kw, values, pos_args, "getImageData") < 0)) __PYX_ERR(0, 518, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_frame = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getImageData", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 518, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.getImageData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10getImageData(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), __pyx_v_frame, __pyx_v_kw);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_frame, CYTHON_UNUSED PyObject *__pyx_v_kw) {
  PyObject *__pyx_v_foo = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getImageData", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":519
 * 
 *     def getImageData(self, frame = None, **kw):
 *         foo = getImageData(self, frame)             # <<<<<<<<<<<<<<
 *         self.unload()
 *         return foo
 */
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_getImageData(__pyx_v_self, __pyx_v_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_foo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":520
 *     def getImageData(self, frame = None, **kw):
 *         foo = getImageData(self, frame)
 *         self.unload()             # <<<<<<<<<<<<<<
 *         return foo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unload); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":521
 *         foo = getImageData(self, frame)
 *         self.unload()
 *         return foo             # <<<<<<<<<<<<<<
 * 
 *     def unload(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_foo);
  __pyx_r = __pyx_v_foo;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":518
 *         return foo
 * 
 *     def getImageData(self, frame = None, **kw):             # <<<<<<<<<<<<<<
 *         foo = getImageData(self, frame)
 *         self.unload()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.getImageData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":523
 *         return foo
 * 
 *     def unload(self):             # <<<<<<<<<<<<<<
 *         self.image = None
 *         self.alpha = None
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_13unload(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_13unload(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unload (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_12unload(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_12unload(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unload", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":524
 * 
 *     def unload(self):
 *         self.image = None             # <<<<<<<<<<<<<<
 *         self.alpha = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = Py_None;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":525
 *     def unload(self):
 *         self.image = None
 *         self.alpha = None             # <<<<<<<<<<<<<<
 * 
 *     def getGraphicMode(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->alpha);
  __Pyx_DECREF(__pyx_v_self->alpha);
  __pyx_v_self->alpha = Py_None;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":523
 *         return foo
 * 
 *     def unload(self):             # <<<<<<<<<<<<<<
 *         self.image = None
 *         self.alpha = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":527
 *         self.alpha = None
 * 
 *     def getGraphicMode(self):             # <<<<<<<<<<<<<<
 *         return graphicModes[self.graphicMode]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_15getGraphicMode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_15getGraphicMode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGraphicMode (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_14getGraphicMode(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_14getGraphicMode(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGraphicMode", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":528
 * 
 *     def getGraphicMode(self):
 *         return graphicModes[self.graphicMode]             # <<<<<<<<<<<<<<
 * 
 * cdef class JavaImage(DataLoader):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_graphicModes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_self->graphicMode, char, 1, __Pyx_PyInt_From_char, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":527
 *         self.alpha = None
 * 
 *     def getGraphicMode(self):             # <<<<<<<<<<<<<<
 *         return graphicModes[self.graphicMode]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.getGraphicMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":343
 * cdef class ImageItem(DataLoader):
 *     cdef public:
 *         int handle             # <<<<<<<<<<<<<<
 *         int checksum # starts at imgWidth and ends at end of bitmap
 *         int references
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_v_self->handle = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.handle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":344
 *     cdef public:
 *         int handle
 *         int checksum # starts at imgWidth and ends at end of bitmap             # <<<<<<<<<<<<<<
 *         int references
 *         short width
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.checksum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_v_self->checksum = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.checksum.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":345
 *         int handle
 *         int checksum # starts at imgWidth and ends at end of bitmap
 *         int references             # <<<<<<<<<<<<<<
 *         short width
 *         short height
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->references); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.references.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_self->references = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.references.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":346
 *         int checksum # starts at imgWidth and ends at end of bitmap
 *         int references
 *         short width             # <<<<<<<<<<<<<<
 *         short height
 *         short xHotspot
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":347
 *         int references
 *         short width
 *         short height             # <<<<<<<<<<<<<<
 *         short xHotspot
 *         short yHotspot
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":348
 *         short width
 *         short height
 *         short xHotspot             # <<<<<<<<<<<<<<
 *         short yHotspot
 *         short actionX
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.xHotspot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_v_self->xHotspot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.xHotspot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":349
 *         short height
 *         short xHotspot
 *         short yHotspot             # <<<<<<<<<<<<<<
 *         short actionX
 *         short actionY
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.yHotspot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->yHotspot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.yHotspot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":350
 *         short xHotspot
 *         short yHotspot
 *         short actionX             # <<<<<<<<<<<<<<
 *         short actionY
 *         object flags
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->actionX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.actionX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_self->actionX = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.actionX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":351
 *         short yHotspot
 *         short actionX
 *         short actionY             # <<<<<<<<<<<<<<
 *         object flags
 *         object image
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->actionY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.actionY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_v_self->actionY = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.actionY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":352
 *         short actionX
 *         short actionY
 *         object flags             # <<<<<<<<<<<<<<
 *         object image
 *         object alpha
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->flags);
  __pyx_r = __pyx_v_self->flags;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->flags);
  __Pyx_DECREF(__pyx_v_self->flags);
  __pyx_v_self->flags = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->flags);
  __Pyx_DECREF(__pyx_v_self->flags);
  __pyx_v_self->flags = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":353
 *         short actionY
 *         object flags
 *         object image             # <<<<<<<<<<<<<<
 *         object alpha
 *         bint indexed
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->image);
  __pyx_r = __pyx_v_self->image;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":354
 *         object flags
 *         object image
 *         object alpha             # <<<<<<<<<<<<<<
 *         bint indexed
 *         char graphicMode
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->alpha);
  __pyx_r = __pyx_v_self->alpha;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->alpha);
  __Pyx_DECREF(__pyx_v_self->alpha);
  __pyx_v_self->alpha = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->alpha);
  __Pyx_DECREF(__pyx_v_self->alpha);
  __pyx_v_self->alpha = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":355
 *         object image
 *         object alpha
 *         bint indexed             # <<<<<<<<<<<<<<
 *         char graphicMode
 *         tuple transparent
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->indexed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.indexed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L1_error)
  __pyx_v_self->indexed = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.indexed.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":356
 *         object alpha
 *         bint indexed
 *         char graphicMode             # <<<<<<<<<<<<<<
 *         tuple transparent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_char(__pyx_v_self->graphicMode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.graphicMode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_char(__pyx_v_value); if (unlikely((__pyx_t_1 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
  __pyx_v_self->graphicMode = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.graphicMode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":357
 *         bint indexed
 *         char graphicMode
 *         tuple transparent             # <<<<<<<<<<<<<<
 * 
 *         ByteReader reader
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->transparent);
  __pyx_r = __pyx_v_self->transparent;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyTuple_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 357, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->transparent);
  __Pyx_DECREF(__pyx_v_self->transparent);
  __pyx_v_self->transparent = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.transparent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->transparent);
  __Pyx_DECREF(__pyx_v_self->transparent);
  __pyx_v_self->transparent = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":359
 *         tuple transparent
 * 
 *         ByteReader reader             # <<<<<<<<<<<<<<
 *         size_t pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->reader));
  __pyx_r = ((PyObject *)__pyx_v_self->reader);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) __PYX_ERR(0, 359, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reader));
  __pyx_v_self->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.reader.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->reader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reader));
  __pyx_v_self->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":360
 * 
 *         ByteReader reader
 *         size_t pos             # <<<<<<<<<<<<<<
 * 
 *     cpdef initialize(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_v_self->pos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_16__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_16__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.actionX, self.actionY, self.alpha, self.checksum, self.flags, self.graphicMode, self.handle, self.height, self.image, self.indexed, self.parent, self.pos, self.reader, self.references, self.settings, self.transparent, self.width, self.xHotspot, self.yHotspot)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->actionX); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_short(__pyx_v_self->actionY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_char(__pyx_v_self->graphicMode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_short(__pyx_v_self->height); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->indexed); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_self->pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->references); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_short(__pyx_v_self->width); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_short(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyInt_From_short(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyTuple_New(19); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->alpha);
  __Pyx_GIVEREF(__pyx_v_self->alpha);
  PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_v_self->alpha);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->flags);
  __Pyx_GIVEREF(__pyx_v_self->flags);
  PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_v_self->flags);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_13, 5, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_13, 6, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_13, 7, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->image);
  __Pyx_GIVEREF(__pyx_v_self->image);
  PyTuple_SET_ITEM(__pyx_t_13, 8, __pyx_v_self->image);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_13, 9, __pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  PyTuple_SET_ITEM(__pyx_t_13, 10, ((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_13, 11, __pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->reader));
  PyTuple_SET_ITEM(__pyx_t_13, 12, ((PyObject *)__pyx_v_self->reader));
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_13, 13, __pyx_t_9);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.settings);
  PyTuple_SET_ITEM(__pyx_t_13, 14, __pyx_v_self->__pyx_base.settings);
  __Pyx_INCREF(__pyx_v_self->transparent);
  __Pyx_GIVEREF(__pyx_v_self->transparent);
  PyTuple_SET_ITEM(__pyx_t_13, 15, __pyx_v_self->transparent);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_13, 16, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_13, 17, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_13, 18, __pyx_t_12);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.actionX, self.actionY, self.alpha, self.checksum, self.flags, self.graphicMode, self.handle, self.height, self.image, self.indexed, self.parent, self.pos, self.reader, self.references, self.settings, self.transparent, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_13 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_v__dict = __pyx_t_13;
  __pyx_t_13 = 0;

  /* "(tree fragment)":7
 *     state = (self.actionX, self.actionY, self.alpha, self.checksum, self.flags, self.graphicMode, self.handle, self.height, self.image, self.indexed, self.parent, self.pos, self.reader, self.references, self.settings, self.transparent, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_14 = (__pyx_v__dict != Py_None);
  __pyx_t_15 = (__pyx_t_14 != 0);
  if (__pyx_t_15) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v__dict);
    __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.alpha is not None or self.flags is not None or self.image is not None or self.parent is not None or self.reader is not None or self.settings is not None or self.transparent is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.actionX, self.actionY, self.alpha, self.checksum, self.flags, self.graphicMode, self.handle, self.height, self.image, self.indexed, self.parent, self.pos, self.reader, self.references, self.settings, self.transparent, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.alpha is not None or self.flags is not None or self.image is not None or self.parent is not None or self.reader is not None or self.settings is not None or self.transparent is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, None), state
 */
  /*else*/ {
    __pyx_t_14 = (__pyx_v_self->alpha != Py_None);
    __pyx_t_16 = (__pyx_t_14 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_15 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (__pyx_v_self->flags != Py_None);
    __pyx_t_14 = (__pyx_t_16 != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_15 = __pyx_t_14;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_14 = (__pyx_v_self->image != Py_None);
    __pyx_t_16 = (__pyx_t_14 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_15 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (((PyObject *)__pyx_v_self->__pyx_base.parent) != Py_None);
    __pyx_t_14 = (__pyx_t_16 != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_15 = __pyx_t_14;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_14 = (((PyObject *)__pyx_v_self->reader) != Py_None);
    __pyx_t_16 = (__pyx_t_14 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_15 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (__pyx_v_self->__pyx_base.settings != ((PyObject*)Py_None));
    __pyx_t_14 = (__pyx_t_16 != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_15 = __pyx_t_14;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_14 = (__pyx_v_self->transparent != ((PyObject*)Py_None));
    __pyx_t_16 = (__pyx_t_14 != 0);
    __pyx_t_15 = __pyx_t_16;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_15;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.alpha is not None or self.flags is not None or self.image is not None or self.parent is not None or self.reader is not None or self.settings is not None or self.transparent is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, None), state
 *     else:
 */
  __pyx_t_15 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_15) {

    /* "(tree fragment)":13
 *         use_setstate = self.alpha is not None or self.flags is not None or self.image is not None or self.parent is not None or self.reader is not None or self.settings is not None or self.transparent is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_pyx_unpickle_ImageItem); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_13, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_90701170);
    __Pyx_GIVEREF(__pyx_int_90701170);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_int_90701170);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_13, 2, Py_None);
    __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_13);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_state);
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.alpha is not None or self.flags is not None or self.image is not None or self.parent is not None or self.reader is not None or self.settings is not None or self.transparent is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, None), state
 *     else:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageItem__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pyx_unpickle_ImageItem); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_13, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_90701170);
    __Pyx_GIVEREF(__pyx_int_90701170);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_int_90701170);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_v_state);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_13);
    __pyx_t_11 = 0;
    __pyx_t_13 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageItem__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_18__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_18__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageItem__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageItem__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageItem, (type(self), 0x567fd72, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageItem__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageItem.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":539
 *         bint flash
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.handle = reader.readShort()
 *         if self.settings.get('withSize', False):
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_1read)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_reader)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":540
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.handle = reader.readShort()             # <<<<<<<<<<<<<<
 *         if self.settings.get('withSize', False):
 *             self.width = reader.readShort()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L1_error)
  __pyx_v_self->handle = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":541
 *     cpdef read(self, ByteReader reader):
 *         self.handle = reader.readShort()
 *         if self.settings.get('withSize', False):             # <<<<<<<<<<<<<<
 *             self.width = reader.readShort()
 *             self.height = reader.readShort()
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 541, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_withSize, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":542
 *         self.handle = reader.readShort()
 *         if self.settings.get('withSize', False):
 *             self.width = reader.readShort()             # <<<<<<<<<<<<<<
 *             self.height = reader.readShort()
 *         self.xHotspot = reader.readShort()
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L1_error)
    __pyx_v_self->width = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":543
 *         if self.settings.get('withSize', False):
 *             self.width = reader.readShort()
 *             self.height = reader.readShort()             # <<<<<<<<<<<<<<
 *         self.xHotspot = reader.readShort()
 *         self.yHotspot = reader.readShort()
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L1_error)
    __pyx_v_self->height = __pyx_t_5;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":541
 *     cpdef read(self, ByteReader reader):
 *         self.handle = reader.readShort()
 *         if self.settings.get('withSize', False):             # <<<<<<<<<<<<<<
 *             self.width = reader.readShort()
 *             self.height = reader.readShort()
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":544
 *             self.width = reader.readShort()
 *             self.height = reader.readShort()
 *         self.xHotspot = reader.readShort()             # <<<<<<<<<<<<<<
 *         self.yHotspot = reader.readShort()
 *         self.actionX = reader.readShort()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_v_self->xHotspot = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":545
 *             self.height = reader.readShort()
 *         self.xHotspot = reader.readShort()
 *         self.yHotspot = reader.readShort()             # <<<<<<<<<<<<<<
 *         self.actionX = reader.readShort()
 *         self.actionY = reader.readShort()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L1_error)
  __pyx_v_self->yHotspot = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":546
 *         self.xHotspot = reader.readShort()
 *         self.yHotspot = reader.readShort()
 *         self.actionX = reader.readShort()             # <<<<<<<<<<<<<<
 *         self.actionY = reader.readShort()
 *         size = reader.readInt()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_v_self->actionX = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":547
 *         self.yHotspot = reader.readShort()
 *         self.actionX = reader.readShort()
 *         self.actionY = reader.readShort()             # <<<<<<<<<<<<<<
 *         size = reader.readInt()
 *         data = reader.read(size)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_5 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 547, __pyx_L1_error)
  __pyx_v_self->actionY = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":548
 *         self.actionX = reader.readShort()
 *         self.actionY = reader.readShort()
 *         size = reader.readInt()             # <<<<<<<<<<<<<<
 *         data = reader.read(size)
 *         try:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":549
 *         self.actionY = reader.readShort()
 *         size = reader.readInt()
 *         data = reader.read(size)             # <<<<<<<<<<<<<<
 *         try:
 *             self.data = zlib.decompress(data)
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 549, __pyx_L1_error)
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.size = __pyx_t_5;
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->read(__pyx_v_reader, 0, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":550
 *         size = reader.readInt()
 *         data = reader.read(size)
 *         try:             # <<<<<<<<<<<<<<
 *             self.data = zlib.decompress(data)
 *             self.flash = True
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "mmfparser/data/chunkloaders/imagebank.pyx":551
 *         data = reader.read(size)
 *         try:
 *             self.data = zlib.decompress(data)             # <<<<<<<<<<<<<<
 *             self.flash = True
 *         except zlib.error:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_zlib); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decompress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->data);
      __Pyx_DECREF(__pyx_v_self->data);
      __pyx_v_self->data = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":552
 *         try:
 *             self.data = zlib.decompress(data)
 *             self.flash = True             # <<<<<<<<<<<<<<
 *         except zlib.error:
 *             self.data = data
 */
      __pyx_v_self->flash = 1;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":550
 *         size = reader.readInt()
 *         data = reader.read(size)
 *         try:             # <<<<<<<<<<<<<<
 *             self.data = zlib.decompress(data)
 *             self.flash = True
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":553
 *             self.data = zlib.decompress(data)
 *             self.flash = True
 *         except zlib.error:             # <<<<<<<<<<<<<<
 *             self.data = data
 *             self.flash = False
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_zlib); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 553, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_11);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_3, __pyx_t_2);
    __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0;
    if (__pyx_t_5) {
      __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_1) < 0) __PYX_ERR(0, 553, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);

      /* "mmfparser/data/chunkloaders/imagebank.pyx":554
 *             self.flash = True
 *         except zlib.error:
 *             self.data = data             # <<<<<<<<<<<<<<
 *             self.flash = False
 * 
 */
      __Pyx_INCREF(__pyx_v_data);
      __Pyx_GIVEREF(__pyx_v_data);
      __Pyx_GOTREF(__pyx_v_self->data);
      __Pyx_DECREF(__pyx_v_self->data);
      __pyx_v_self->data = __pyx_v_data;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":555
 *         except zlib.error:
 *             self.data = data
 *             self.flash = False             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
      __pyx_v_self->flash = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":550
 *         size = reader.readInt()
 *         data = reader.read(size)
 *         try:             # <<<<<<<<<<<<<<
 *             self.data = zlib.decompress(data)
 *             self.flash = True
 */
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    __pyx_L9_try_end:;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":539
 *         bint flash
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.handle = reader.readShort()
 *         if self.settings.get('withSize', False):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":557
 *             self.flash = False
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.handle)
 *         if self.settings.get('withSize', False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":558
 * 
 *     def write(self, reader):
 *         reader.writeShort(self.handle)             # <<<<<<<<<<<<<<
 *         if self.settings.get('withSize', False):
 *             reader.writeShort(self.width)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":559
 *     def write(self, reader):
 *         reader.writeShort(self.handle)
 *         if self.settings.get('withSize', False):             # <<<<<<<<<<<<<<
 *             reader.writeShort(self.width)
 *             reader.writeShort(self.height)
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 559, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_withSize, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":560
 *         reader.writeShort(self.handle)
 *         if self.settings.get('withSize', False):
 *             reader.writeShort(self.width)             # <<<<<<<<<<<<<<
 *             reader.writeShort(self.height)
 *         reader.writeShort(self.xHotspot)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":561
 *         if self.settings.get('withSize', False):
 *             reader.writeShort(self.width)
 *             reader.writeShort(self.height)             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.xHotspot)
 *         reader.writeShort(self.yHotspot)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":559
 *     def write(self, reader):
 *         reader.writeShort(self.handle)
 *         if self.settings.get('withSize', False):             # <<<<<<<<<<<<<<
 *             reader.writeShort(self.width)
 *             reader.writeShort(self.height)
 */
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":562
 *             reader.writeShort(self.width)
 *             reader.writeShort(self.height)
 *         reader.writeShort(self.xHotspot)             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.yHotspot)
 *         reader.writeShort(self.actionX)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":563
 *             reader.writeShort(self.height)
 *         reader.writeShort(self.xHotspot)
 *         reader.writeShort(self.yHotspot)             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.actionX)
 *         reader.writeShort(self.actionY)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":564
 *         reader.writeShort(self.xHotspot)
 *         reader.writeShort(self.yHotspot)
 *         reader.writeShort(self.actionX)             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.actionY)
 *         reader.writeInt(len(self.data))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->actionX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":565
 *         reader.writeShort(self.yHotspot)
 *         reader.writeShort(self.actionX)
 *         reader.writeShort(self.actionY)             # <<<<<<<<<<<<<<
 *         reader.writeInt(len(self.data))
 *         reader.write(self.data)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->actionY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":566
 *         reader.writeShort(self.actionX)
 *         reader.writeShort(self.actionY)
 *         reader.writeInt(len(self.data))             # <<<<<<<<<<<<<<
 *         reader.write(self.data)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeInt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_self->data;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":567
 *         reader.writeShort(self.actionY)
 *         reader.writeInt(len(self.data))
 *         reader.write(self.data)             # <<<<<<<<<<<<<<
 * 
 *     def createDisplay(self, *arg, **kw):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_self->data) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->data);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":557
 *             self.flash = False
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.handle)
 *         if self.settings.get('withSize', False):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":569
 *         reader.write(self.data)
 * 
 *     def createDisplay(self, *arg, **kw):             # <<<<<<<<<<<<<<
 *         if self.flash:
 *             from mmfparser.player.sprite import ImageData
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5createDisplay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5createDisplay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_arg = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createDisplay (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "createDisplay", 1))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4createDisplay(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), __pyx_v_arg, __pyx_v_kw);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4createDisplay(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg, CYTHON_UNUSED PyObject *__pyx_v_kw) {
  PyObject *__pyx_v_ImageData = NULL;
  PyObject *__pyx_v_newImage = NULL;
  PyObject *__pyx_v_load_image = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createDisplay", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":570
 * 
 *     def createDisplay(self, *arg, **kw):
 *         if self.flash:             # <<<<<<<<<<<<<<
 *             from mmfparser.player.sprite import ImageData
 *             newImage = ImageData(self.width, self.height, 'ARGB',
 */
  __pyx_t_1 = (__pyx_v_self->flash != 0);
  if (__pyx_t_1) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":571
 *     def createDisplay(self, *arg, **kw):
 *         if self.flash:
 *             from mmfparser.player.sprite import ImageData             # <<<<<<<<<<<<<<
 *             newImage = ImageData(self.width, self.height, 'ARGB',
 *                 self.data, self.width * -4, None)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_ImageData);
    __Pyx_GIVEREF(__pyx_n_s_ImageData);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ImageData);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_mmfparser_player_sprite, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ImageData); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_ImageData = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":572
 *         if self.flash:
 *             from mmfparser.player.sprite import ImageData
 *             newImage = ImageData(self.width, self.height, 'ARGB',             # <<<<<<<<<<<<<<
 *                 self.data, self.width * -4, None)
 *         else:
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":573
 *             from mmfparser.player.sprite import ImageData
 *             newImage = ImageData(self.width, self.height, 'ARGB',
 *                 self.data, self.width * -4, None)             # <<<<<<<<<<<<<<
 *         else:
 *             from mmfparser.player.common import load_image
 */
    __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_self->width * -4L)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_ImageData);
    __pyx_t_6 = __pyx_v_ImageData; __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[7] = {__pyx_t_7, __pyx_t_2, __pyx_t_4, __pyx_n_s_ARGB, __pyx_v_self->data, __pyx_t_5, Py_None};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[7] = {__pyx_t_7, __pyx_t_2, __pyx_t_4, __pyx_n_s_ARGB, __pyx_v_self->data, __pyx_t_5, Py_None};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_ARGB);
      __Pyx_GIVEREF(__pyx_n_s_ARGB);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_n_s_ARGB);
      __Pyx_INCREF(__pyx_v_self->data);
      __Pyx_GIVEREF(__pyx_v_self->data);
      PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_v_self->data);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_5);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, Py_None);
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_newImage = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":570
 * 
 *     def createDisplay(self, *arg, **kw):
 *         if self.flash:             # <<<<<<<<<<<<<<
 *             from mmfparser.player.sprite import ImageData
 *             newImage = ImageData(self.width, self.height, 'ARGB',
 */
    goto __pyx_L3;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":575
 *                 self.data, self.width * -4, None)
 *         else:
 *             from mmfparser.player.common import load_image             # <<<<<<<<<<<<<<
 *             newImage = load_image(StringIO(self.data))
 *         newImage.anchor_x = self.xHotspot
 */
  /*else*/ {
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_load_image);
    __Pyx_GIVEREF(__pyx_n_s_load_image);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_load_image);
    __pyx_t_6 = __Pyx_Import(__pyx_n_s_mmfparser_player_common, __pyx_t_3, -1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_load_image); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_load_image = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":576
 *         else:
 *             from mmfparser.player.common import load_image
 *             newImage = load_image(StringIO(self.data))             # <<<<<<<<<<<<<<
 *         newImage.anchor_x = self.xHotspot
 *         newImage.anchor_y = self.height - self.yHotspot
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_StringIO); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_self->data) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_self->data);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_v_load_image);
    __pyx_t_9 = __pyx_v_load_image; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_newImage = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":577
 *             from mmfparser.player.common import load_image
 *             newImage = load_image(StringIO(self.data))
 *         newImage.anchor_x = self.xHotspot             # <<<<<<<<<<<<<<
 *         newImage.anchor_y = self.height - self.yHotspot
 *         return newImage
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newImage, __pyx_n_s_anchor_x, __pyx_t_6) < 0) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":578
 *             newImage = load_image(StringIO(self.data))
 *         newImage.anchor_x = self.xHotspot
 *         newImage.anchor_y = self.height - self.yHotspot             # <<<<<<<<<<<<<<
 *         return newImage
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->height - __pyx_v_self->yHotspot)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newImage, __pyx_n_s_anchor_y, __pyx_t_6) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":579
 *         newImage.anchor_x = self.xHotspot
 *         newImage.anchor_y = self.height - self.yHotspot
 *         return newImage             # <<<<<<<<<<<<<<
 * 
 *     def getImageData(self, *arg, **kw):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_newImage);
  __pyx_r = __pyx_v_newImage;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":569
 *         reader.write(self.data)
 * 
 *     def createDisplay(self, *arg, **kw):             # <<<<<<<<<<<<<<
 *         if self.flash:
 *             from mmfparser.player.sprite import ImageData
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.createDisplay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ImageData);
  __Pyx_XDECREF(__pyx_v_newImage);
  __Pyx_XDECREF(__pyx_v_load_image);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":581
 *         return newImage
 * 
 *     def getImageData(self, *arg, **kw):             # <<<<<<<<<<<<<<
 *         from mmfparser.image import Image
 *         img = Image(data = self.data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7getImageData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7getImageData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_arg = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getImageData (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getImageData", 1))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arg = __pyx_args;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6getImageData(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), __pyx_v_arg, __pyx_v_kw);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6getImageData(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg, CYTHON_UNUSED PyObject *__pyx_v_kw) {
  PyObject *__pyx_v_Image = NULL;
  PyObject *__pyx_v_img = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getImageData", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":582
 * 
 *     def getImageData(self, *arg, **kw):
 *         from mmfparser.image import Image             # <<<<<<<<<<<<<<
 *         img = Image(data = self.data)
 *         return img.get_data()
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Image);
  __Pyx_GIVEREF(__pyx_n_s_Image);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Image);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_image, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Image); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Image = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":583
 *     def getImageData(self, *arg, **kw):
 *         from mmfparser.image import Image
 *         img = Image(data = self.data)             # <<<<<<<<<<<<<<
 *         return img.get_data()
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_data, __pyx_v_self->data) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_Image, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_img = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":584
 *         from mmfparser.image import Image
 *         img = Image(data = self.data)
 *         return img.get_data()             # <<<<<<<<<<<<<<
 * 
 * cdef class ImageBank(DataLoader):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_img, __pyx_n_s_get_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":581
 *         return newImage
 * 
 *     def getImageData(self, *arg, **kw):             # <<<<<<<<<<<<<<
 *         from mmfparser.image import Image
 *         img = Image(data = self.data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.getImageData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Image);
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":532
 * cdef class JavaImage(DataLoader):
 *     cdef public:
 *         int handle             # <<<<<<<<<<<<<<
 *         int xHotspot, yHotspot
 *         int actionX, actionY
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_v_self->handle = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.handle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":533
 *     cdef public:
 *         int handle
 *         int xHotspot, yHotspot             # <<<<<<<<<<<<<<
 *         int actionX, actionY
 *         int width, height
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.xHotspot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_v_self->xHotspot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.xHotspot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.yHotspot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_v_self->yHotspot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.yHotspot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":534
 *         int handle
 *         int xHotspot, yHotspot
 *         int actionX, actionY             # <<<<<<<<<<<<<<
 *         int width, height
 *         object data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->actionX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.actionX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
  __pyx_v_self->actionX = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.actionX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->actionY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.actionY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
  __pyx_v_self->actionY = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.actionY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":535
 *         int xHotspot, yHotspot
 *         int actionX, actionY
 *         int width, height             # <<<<<<<<<<<<<<
 *         object data
 *         bint flash
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":536
 *         int actionX, actionY
 *         int width, height
 *         object data             # <<<<<<<<<<<<<<
 *         bint flash
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->data);
  __pyx_r = __pyx_v_self->data;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":537
 *         int width, height
 *         object data
 *         bint flash             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->flash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.flash.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_v_self->flash = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.flash.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.actionX, self.actionY, self.data, self.flash, self.handle, self.height, self.parent, self.settings, self.width, self.xHotspot, self.yHotspot)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->actionX); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->actionY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->flash); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->handle); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->xHotspot); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->yHotspot); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(11); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->data);
  __Pyx_GIVEREF(__pyx_v_self->data);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_self->data);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  PyTuple_SET_ITEM(__pyx_t_9, 6, ((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_INCREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.settings);
  PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_v_self->__pyx_base.settings);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 8, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 9, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 10, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.actionX, self.actionY, self.data, self.flash, self.handle, self.height, self.parent, self.settings, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_9 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v__dict = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "(tree fragment)":7
 *     state = (self.actionX, self.actionY, self.data, self.flash, self.handle, self.height, self.parent, self.settings, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_10 = (__pyx_v__dict != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v__dict);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.data is not None or self.parent is not None or self.settings is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.actionX, self.actionY, self.data, self.flash, self.handle, self.height, self.parent, self.settings, self.width, self.xHotspot, self.yHotspot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.data is not None or self.parent is not None or self.settings is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, None), state
 */
  /*else*/ {
    __pyx_t_10 = (__pyx_v_self->data != Py_None);
    __pyx_t_12 = (__pyx_t_10 != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_11 = __pyx_t_12;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_12 = (((PyObject *)__pyx_v_self->__pyx_base.parent) != Py_None);
    __pyx_t_10 = (__pyx_t_12 != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_11 = __pyx_t_10;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_v_self->__pyx_base.settings != ((PyObject*)Py_None));
    __pyx_t_12 = (__pyx_t_10 != 0);
    __pyx_t_11 = __pyx_t_12;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_11;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.data is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, None), state
 *     else:
 */
  __pyx_t_11 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_11) {

    /* "(tree fragment)":13
 *         use_setstate = self.data is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pyx_unpickle_JavaImage); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_55871985);
    __Pyx_GIVEREF(__pyx_int_55871985);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_55871985);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_9, 2, Py_None);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.data is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, None), state
 *     else:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_JavaImage__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pyx_unpickle_JavaImage); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_55871985);
    __Pyx_GIVEREF(__pyx_int_55871985);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_55871985);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_state);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
    __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_JavaImage__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_10__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_10__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_JavaImage__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_JavaImage__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_JavaImage, (type(self), 0x35489f1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_JavaImage__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.JavaImage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":591
 * 
 *     @property
 *     def items(self):             # <<<<<<<<<<<<<<
 *         return self.itemDict.values()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":592
 *     @property
 *     def items(self):
 *         return self.itemDict.values()             # <<<<<<<<<<<<<<
 * 
 *     cpdef initialize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->itemDict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 592, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_v_self->itemDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":591
 * 
 *     @property
 *     def items(self):             # <<<<<<<<<<<<<<
 *         return self.itemDict.values()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.items.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":594
 *         return self.itemDict.values()
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.itemDict = {}
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_1initialize)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":595
 * 
 *     cpdef initialize(self):
 *         self.itemDict = {}             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->itemDict);
  __Pyx_DECREF(__pyx_v_self->itemDict);
  __pyx_v_self->itemDict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":594
 *         return self.itemDict.values()
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.itemDict = {}
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":597
 *         self.itemDict = {}
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         cdef bint java = self.settings.get('java', False)
 *         cdef int build = self.settings['build']
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  int __pyx_v_java;
  int __pyx_v_build;
  CYTHON_UNUSED int __pyx_v_i;
  int __pyx_v_numberOfItems;
  PyObject *__pyx_v_path = NULL;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_newReader = NULL;
  PyObject *__pyx_v_bank = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_newItem = NULL;
  int __pyx_v_itemsInBank;
  int __pyx_v_itemsToRead;
  int __pyx_v_currentPosition;
  PyObject *__pyx_v_itemDict = NULL;
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_3read)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_reader)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":598
 * 
 *     cpdef read(self, ByteReader reader):
 *         cdef bint java = self.settings.get('java', False)             # <<<<<<<<<<<<<<
 *         cdef int build = self.settings['build']
 *         cdef int i
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 598, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_java, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_java = __pyx_t_5;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":599
 *     cpdef read(self, ByteReader reader):
 *         cdef bint java = self.settings.get('java', False)
 *         cdef int build = self.settings['build']             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int numberOfItems
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 599, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_build = __pyx_t_6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":602
 *         cdef int i
 *         cdef int numberOfItems
 *         if not java:             # <<<<<<<<<<<<<<
 *             if self.settings.get('debug', False):
 *                 path = self.readString(reader)
 */
  __pyx_t_5 = ((!(__pyx_v_java != 0)) != 0);
  if (__pyx_t_5) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":603
 *         cdef int numberOfItems
 *         if not java:
 *             if self.settings.get('debug', False):             # <<<<<<<<<<<<<<
 *                 path = self.readString(reader)
 *                 newReader = ByteReader(open(path, 'rb'))
 */
    if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(0, 603, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_debug, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "mmfparser/data/chunkloaders/imagebank.pyx":604
 *         if not java:
 *             if self.settings.get('debug', False):
 *                 path = self.readString(reader)             # <<<<<<<<<<<<<<
 *                 newReader = ByteReader(open(path, 'rb'))
 *                 newReader.skipBytes(4)
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.readString(((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_v_self), __pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_path = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":605
 *             if self.settings.get('debug', False):
 *                 path = self.readString(reader)
 *                 newReader = ByteReader(open(path, 'rb'))             # <<<<<<<<<<<<<<
 *                 newReader.skipBytes(4)
 *                 bank = self.new(AGMIBank, newReader)
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_path);
      __Pyx_GIVEREF(__pyx_v_path);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path);
      __Pyx_INCREF(__pyx_n_s_rb);
      __Pyx_GIVEREF(__pyx_n_s_rb);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_rb);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9mmfparser_10bytereader_ByteReader), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_newReader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":606
 *                 path = self.readString(reader)
 *                 newReader = ByteReader(open(path, 'rb'))
 *                 newReader.skipBytes(4)             # <<<<<<<<<<<<<<
 *                 bank = self.new(AGMIBank, newReader)
 *                 for item in bank.items:
 */
      (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_newReader->__pyx_vtab)->skipBytes(__pyx_v_newReader, 4, 0));

      /* "mmfparser/data/chunkloaders/imagebank.pyx":607
 *                 newReader = ByteReader(open(path, 'rb'))
 *                 newReader.skipBytes(4)
 *                 bank = self.new(AGMIBank, newReader)             # <<<<<<<<<<<<<<
 *                 for item in bank.items:
 *                     self.itemDict[item.handle] = item
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AGMIBank); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_newReader)};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_newReader)};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
        __Pyx_INCREF(((PyObject *)__pyx_v_newReader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_newReader));
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_newReader));
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_bank = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":608
 *                 newReader.skipBytes(4)
 *                 bank = self.new(AGMIBank, newReader)
 *                 for item in bank.items:             # <<<<<<<<<<<<<<
 *                     self.itemDict[item.handle] = item
 *                 return
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_bank, __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 608, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 608, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":609
 *                 bank = self.new(AGMIBank, newReader)
 *                 for item in bank.items:
 *                     self.itemDict[item.handle] = item             # <<<<<<<<<<<<<<
 *                 return
 *             numberOfItems = reader.readInt()
 */
        if (unlikely(__pyx_v_self->itemDict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 609, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(PyDict_SetItem(__pyx_v_self->itemDict, __pyx_t_1, __pyx_v_item) < 0)) __PYX_ERR(0, 609, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":608
 *                 newReader.skipBytes(4)
 *                 bank = self.new(AGMIBank, newReader)
 *                 for item in bank.items:             # <<<<<<<<<<<<<<
 *                     self.itemDict[item.handle] = item
 *                 return
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":610
 *                 for item in bank.items:
 *                     self.itemDict[item.handle] = item
 *                 return             # <<<<<<<<<<<<<<
 *             numberOfItems = reader.readInt()
 *             for i in range(numberOfItems):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":603
 *         cdef int numberOfItems
 *         if not java:
 *             if self.settings.get('debug', False):             # <<<<<<<<<<<<<<
 *                 path = self.readString(reader)
 *                 newReader = ByteReader(open(path, 'rb'))
 */
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":611
 *                     self.itemDict[item.handle] = item
 *                 return
 *             numberOfItems = reader.readInt()             # <<<<<<<<<<<<<<
 *             for i in range(numberOfItems):
 *                 newItem = self.new(ImageItem, reader)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_numberOfItems = __pyx_t_6;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":612
 *                 return
 *             numberOfItems = reader.readInt()
 *             for i in range(numberOfItems):             # <<<<<<<<<<<<<<
 *                 newItem = self.new(ImageItem, reader)
 *                 if build >= 284:
 */
    __pyx_t_6 = __pyx_v_numberOfItems;
    __pyx_t_10 = __pyx_t_6;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":613
 *             numberOfItems = reader.readInt()
 *             for i in range(numberOfItems):
 *                 newItem = self.new(ImageItem, reader)             # <<<<<<<<<<<<<<
 *                 if build >= 284:
 *                     newItem.handle -= 1
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem), ((PyObject *)__pyx_v_reader)};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem), ((PyObject *)__pyx_v_reader)};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem));
        __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem));
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_12, ((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem));
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_12, ((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_newItem, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":614
 *             for i in range(numberOfItems):
 *                 newItem = self.new(ImageItem, reader)
 *                 if build >= 284:             # <<<<<<<<<<<<<<
 *                     newItem.handle -= 1
 *                 self.itemDict[newItem.handle] = newItem
 */
      __pyx_t_5 = ((__pyx_v_build >= 0x11C) != 0);
      if (__pyx_t_5) {

        /* "mmfparser/data/chunkloaders/imagebank.pyx":615
 *                 newItem = self.new(ImageItem, reader)
 *                 if build >= 284:
 *                     newItem.handle -= 1             # <<<<<<<<<<<<<<
 *                 self.itemDict[newItem.handle] = newItem
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_newItem, __pyx_n_s_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_newItem, __pyx_n_s_handle, __pyx_t_1) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":614
 *             for i in range(numberOfItems):
 *                 newItem = self.new(ImageItem, reader)
 *                 if build >= 284:             # <<<<<<<<<<<<<<
 *                     newItem.handle -= 1
 *                 self.itemDict[newItem.handle] = newItem
 */
      }

      /* "mmfparser/data/chunkloaders/imagebank.pyx":616
 *                 if build >= 284:
 *                     newItem.handle -= 1
 *                 self.itemDict[newItem.handle] = newItem             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      if (unlikely(__pyx_v_self->itemDict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 616, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_newItem, __pyx_n_s_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyDict_SetItem(__pyx_v_self->itemDict, __pyx_t_1, __pyx_v_newItem) < 0)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "mmfparser/data/chunkloaders/imagebank.pyx":602
 *         cdef int i
 *         cdef int numberOfItems
 *         if not java:             # <<<<<<<<<<<<<<
 *             if self.settings.get('debug', False):
 *                 path = self.readString(reader)
 */
    goto __pyx_L3;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":619
 * 
 *         else:
 *             numberOfItems = reader.readShort()             # <<<<<<<<<<<<<<
 *             itemsInBank = reader.readShort()
 *             itemsToRead = itemsInBank
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_6 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L1_error)
    __pyx_v_numberOfItems = __pyx_t_6;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":620
 *         else:
 *             numberOfItems = reader.readShort()
 *             itemsInBank = reader.readShort()             # <<<<<<<<<<<<<<
 *             itemsToRead = itemsInBank
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_6 == ((int)-10) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L1_error)
    __pyx_v_itemsInBank = __pyx_t_6;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":621
 *             numberOfItems = reader.readShort()
 *             itemsInBank = reader.readShort()
 *             itemsToRead = itemsInBank             # <<<<<<<<<<<<<<
 * 
 *             currentPosition = reader.tell()
 */
    __pyx_v_itemsToRead = __pyx_v_itemsInBank;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":623
 *             itemsToRead = itemsInBank
 * 
 *             currentPosition = reader.tell()             # <<<<<<<<<<<<<<
 *             try:
 *                 self.itemDict = itemDict = {}
 */
    __pyx_v_currentPosition = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->tell(__pyx_v_reader, 0);

    /* "mmfparser/data/chunkloaders/imagebank.pyx":624
 * 
 *             currentPosition = reader.tell()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      /*try:*/ {

        /* "mmfparser/data/chunkloaders/imagebank.pyx":625
 *             currentPosition = reader.tell()
 *             try:
 *                 self.itemDict = itemDict = {}             # <<<<<<<<<<<<<<
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = True)
 */
        __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_v_self->itemDict);
        __Pyx_DECREF(__pyx_v_self->itemDict);
        __pyx_v_self->itemDict = __pyx_t_1;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_itemDict = __pyx_t_1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":626
 *             try:
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):             # <<<<<<<<<<<<<<
 *                     newItem = self.new(JavaImage, reader, withSize = True)
 *                     itemDict[newItem.handle] = newItem
 */
        __pyx_t_6 = __pyx_v_itemsToRead;
        __pyx_t_10 = __pyx_t_6;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v__ = __pyx_t_11;

          /* "mmfparser/data/chunkloaders/imagebank.pyx":627
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = True)             # <<<<<<<<<<<<<<
 *                     itemDict[newItem.handle] = newItem
 *             except struct.error:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_INCREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          __Pyx_INCREF(((PyObject *)__pyx_v_reader));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
          PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_reader));
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_withSize, Py_True) < 0) __PYX_ERR(0, 627, __pyx_L10_error)
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF_SET(__pyx_v_newItem, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "mmfparser/data/chunkloaders/imagebank.pyx":628
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = True)
 *                     itemDict[newItem.handle] = newItem             # <<<<<<<<<<<<<<
 *             except struct.error:
 *                 reader.seek(currentPosition)
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_newItem, __pyx_n_s_handle); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(PyDict_SetItem(__pyx_v_itemDict, __pyx_t_7, __pyx_v_newItem) < 0)) __PYX_ERR(0, 628, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "mmfparser/data/chunkloaders/imagebank.pyx":624
 * 
 *             currentPosition = reader.tell()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L15_try_end;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":629
 *                     newItem = self.new(JavaImage, reader, withSize = True)
 *                     itemDict[newItem.handle] = newItem
 *             except struct.error:             # <<<<<<<<<<<<<<
 *                 reader.seek(currentPosition)
 *                 self.itemDict = itemDict = {}
 */
      __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_3, &__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_struct); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_error); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_7, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_3, __pyx_t_2);
      __pyx_t_7 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0;
      if (__pyx_t_6) {
        __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_7) < 0) __PYX_ERR(0, 629, __pyx_L12_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_7);

        /* "mmfparser/data/chunkloaders/imagebank.pyx":630
 *                     itemDict[newItem.handle] = newItem
 *             except struct.error:
 *                 reader.seek(currentPosition)             # <<<<<<<<<<<<<<
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 */
        (void)(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->seek(__pyx_v_reader, __pyx_v_currentPosition, 0, NULL));

        /* "mmfparser/data/chunkloaders/imagebank.pyx":631
 *             except struct.error:
 *                 reader.seek(currentPosition)
 *                 self.itemDict = itemDict = {}             # <<<<<<<<<<<<<<
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = False)
 */
        __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 631, __pyx_L12_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_v_self->itemDict);
        __Pyx_DECREF(__pyx_v_self->itemDict);
        __pyx_v_self->itemDict = __pyx_t_4;
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_itemDict, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "mmfparser/data/chunkloaders/imagebank.pyx":632
 *                 reader.seek(currentPosition)
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):             # <<<<<<<<<<<<<<
 *                     newItem = self.new(JavaImage, reader, withSize = False)
 *                     itemDict[newItem.handle] = newItem
 */
        __pyx_t_6 = __pyx_v_itemsToRead;
        __pyx_t_10 = __pyx_t_6;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v__ = __pyx_t_11;

          /* "mmfparser/data/chunkloaders/imagebank.pyx":633
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = False)             # <<<<<<<<<<<<<<
 *                     itemDict[newItem.handle] = newItem
 * 
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage));
          __Pyx_INCREF(((PyObject *)__pyx_v_reader));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
          PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_reader));
          __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 633, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_withSize, Py_False) < 0) __PYX_ERR(0, 633, __pyx_L12_except_error)
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 633, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF_SET(__pyx_v_newItem, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "mmfparser/data/chunkloaders/imagebank.pyx":634
 *                 for _ in xrange(itemsToRead):
 *                     newItem = self.new(JavaImage, reader, withSize = False)
 *                     itemDict[newItem.handle] = newItem             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_newItem, __pyx_n_s_handle); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 634, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          if (unlikely(PyDict_SetItem(__pyx_v_itemDict, __pyx_t_17, __pyx_v_newItem) < 0)) __PYX_ERR(0, 634, __pyx_L12_except_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L11_exception_handled;
      }
      goto __pyx_L12_except_error;
      __pyx_L12_except_error:;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":624
 * 
 *             currentPosition = reader.tell()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.itemDict = itemDict = {}
 *                 for _ in xrange(itemsToRead):
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      goto __pyx_L1_error;
      __pyx_L11_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_L15_try_end:;
    }
  }
  __pyx_L3:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":597
 *         self.itemDict = {}
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         cdef bint java = self.settings.get('java', False)
 *         cdef int build = self.settings['build']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_newReader);
  __Pyx_XDECREF(__pyx_v_bank);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_newItem);
  __Pyx_XDECREF(__pyx_v_itemDict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_2read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_2read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":636
 *                     itemDict[newItem.handle] = newItem
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         java = self.settings.get('java', False)
 *         if not java:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_4write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_4write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_v_java = NULL;
  PyObject *__pyx_v_offsetDict = NULL;
  PyObject *__pyx_v_offsets = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":637
 * 
 *     def write(self, reader):
 *         java = self.settings.get('java', False)             # <<<<<<<<<<<<<<
 *         if not java:
 *             offsetDict = {}
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 637, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_java, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_java = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":638
 *     def write(self, reader):
 *         java = self.settings.get('java', False)
 *         if not java:             # <<<<<<<<<<<<<<
 *             offsetDict = {}
 *             self.offsets = offsets = []
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_java); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "mmfparser/data/chunkloaders/imagebank.pyx":639
 *         java = self.settings.get('java', False)
 *         if not java:
 *             offsetDict = {}             # <<<<<<<<<<<<<<
 *             self.offsets = offsets = []
 *             reader.writeInt(len(self.items))
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_offsetDict = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":640
 *         if not java:
 *             offsetDict = {}
 *             self.offsets = offsets = []             # <<<<<<<<<<<<<<
 *             reader.writeInt(len(self.items))
 *             for item in self.items:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_offsets, __pyx_t_1) < 0) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_offsets = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":641
 *             offsetDict = {}
 *             self.offsets = offsets = []
 *             reader.writeInt(len(self.items))             # <<<<<<<<<<<<<<
 *             for item in self.items:
 *                 offsetDict[item.handle] = reader.tell() + 4
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeInt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":642
 *             self.offsets = offsets = []
 *             reader.writeInt(len(self.items))
 *             for item in self.items:             # <<<<<<<<<<<<<<
 *                 offsetDict[item.handle] = reader.tell() + 4
 *                 item.write(reader)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 642, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 642, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 642, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 642, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":643
 *             reader.writeInt(len(self.items))
 *             for item in self.items:
 *                 offsetDict[item.handle] = reader.tell() + 4             # <<<<<<<<<<<<<<
 *                 item.write(reader)
 *             for key in sorted(offsetDict.keys()):
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_tell); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyDict_SetItem(__pyx_v_offsetDict, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":644
 *             for item in self.items:
 *                 offsetDict[item.handle] = reader.tell() + 4
 *                 item.write(reader)             # <<<<<<<<<<<<<<
 *             for key in sorted(offsetDict.keys()):
 *                 offsets.append(offsetDict[key])
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_v_reader) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_reader);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":642
 *             self.offsets = offsets = []
 *             reader.writeInt(len(self.items))
 *             for item in self.items:             # <<<<<<<<<<<<<<
 *                 offsetDict[item.handle] = reader.tell() + 4
 *                 item.write(reader)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":645
 *                 offsetDict[item.handle] = reader.tell() + 4
 *                 item.write(reader)
 *             for key in sorted(offsetDict.keys()):             # <<<<<<<<<<<<<<
 *                 offsets.append(offsetDict[key])
 *         else:
 */
    __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_offsetDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_9 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 645, __pyx_L1_error)
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 645, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":646
 *                 item.write(reader)
 *             for key in sorted(offsetDict.keys()):
 *                 offsets.append(offsetDict[key])             # <<<<<<<<<<<<<<
 *         else:
 *             reader.writeShort(len(self.items))
 */
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_offsetDict, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_offsets, __pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":645
 *                 offsetDict[item.handle] = reader.tell() + 4
 *                 item.write(reader)
 *             for key in sorted(offsetDict.keys()):             # <<<<<<<<<<<<<<
 *                 offsets.append(offsetDict[key])
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":638
 *     def write(self, reader):
 *         java = self.settings.get('java', False)
 *         if not java:             # <<<<<<<<<<<<<<
 *             offsetDict = {}
 *             self.offsets = offsets = []
 */
    goto __pyx_L3;
  }

  /* "mmfparser/data/chunkloaders/imagebank.pyx":648
 *                 offsets.append(offsetDict[key])
 *         else:
 *             reader.writeShort(len(self.items))             # <<<<<<<<<<<<<<
 *             reader.writeShort(len(self.items))
 *             for item in self.items:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":649
 *         else:
 *             reader.writeShort(len(self.items))
 *             reader.writeShort(len(self.items))             # <<<<<<<<<<<<<<
 *             for item in self.items:
 *                 item.write(reader)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser/data/chunkloaders/imagebank.pyx":650
 *             reader.writeShort(len(self.items))
 *             reader.writeShort(len(self.items))
 *             for item in self.items:             # <<<<<<<<<<<<<<
 *                 item.write(reader)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 650, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":651
 *             reader.writeShort(len(self.items))
 *             for item in self.items:
 *                 item.write(reader)             # <<<<<<<<<<<<<<
 * 
 *     def fromHandle(self, handle):
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_reader) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_reader);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mmfparser/data/chunkloaders/imagebank.pyx":650
 *             reader.writeShort(len(self.items))
 *             reader.writeShort(len(self.items))
 *             for item in self.items:             # <<<<<<<<<<<<<<
 *                 item.write(reader)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":636
 *                     itemDict[newItem.handle] = newItem
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         java = self.settings.get('java', False)
 *         if not java:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_java);
  __Pyx_XDECREF(__pyx_v_offsetDict);
  __Pyx_XDECREF(__pyx_v_offsets);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":653
 *                 item.write(reader)
 * 
 *     def fromHandle(self, handle):             # <<<<<<<<<<<<<<
 *         return self.itemDict[handle]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_7fromHandle(PyObject *__pyx_v_self, PyObject *__pyx_v_handle); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_7fromHandle(PyObject *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromHandle (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_6fromHandle(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self), ((PyObject *)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_6fromHandle(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromHandle", 0);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":654
 * 
 *     def fromHandle(self, handle):
 *         return self.itemDict[handle]             # <<<<<<<<<<<<<<
 * 
 * from mmfparser.data.mfaloaders.imagebank import AGMIBank
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->itemDict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 654, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->itemDict, __pyx_v_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":653
 *                 item.write(reader)
 * 
 *     def fromHandle(self, handle):             # <<<<<<<<<<<<<<
 *         return self.itemDict[handle]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.fromHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/data/chunkloaders/imagebank.pyx":588
 * cdef class ImageBank(DataLoader):
 *     cdef public:
 *         dict itemDict             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->itemDict);
  __pyx_r = __pyx_v_self->itemDict;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->itemDict);
  __Pyx_DECREF(__pyx_v_self->itemDict);
  __pyx_v_self->itemDict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.itemDict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->itemDict);
  __Pyx_DECREF(__pyx_v_self->itemDict);
  __pyx_v_self->itemDict = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8__reduce_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8__reduce_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.itemDict, self.parent, self.settings)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->itemDict);
  __Pyx_GIVEREF(__pyx_v_self->itemDict);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->itemDict);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.parent));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->__pyx_base.parent));
  __Pyx_INCREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.settings);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->__pyx_base.settings);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.itemDict, self.parent, self.settings)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.itemDict, self.parent, self.settings)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.itemDict is not None or self.parent is not None or self.settings is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.itemDict, self.parent, self.settings)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.itemDict is not None or self.parent is not None or self.settings is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, None), state
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->itemDict != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base.parent) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_self->__pyx_base.settings != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_2 != 0);
    __pyx_t_3 = __pyx_t_5;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.itemDict is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.itemDict is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_ImageBank); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_154289730);
    __Pyx_GIVEREF(__pyx_int_154289730);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_154289730);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.itemDict is not None or self.parent is not None or self.settings is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, None), state
 *     else:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageBank__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_ImageBank); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_154289730);
    __Pyx_GIVEREF(__pyx_int_154289730);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_154289730);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageBank__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_10__setstate_cython__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_10__setstate_cython__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageBank__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageBank__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageBank, (type(self), 0x9324642, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageBank__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.ImageBank.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BasePoint(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_1__pyx_unpickle_BasePoint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_1__pyx_unpickle_BasePoint = {"__pyx_unpickle_BasePoint", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_1__pyx_unpickle_BasePoint, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_1__pyx_unpickle_BasePoint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BasePoint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BasePoint", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BasePoint", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_BasePoint") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BasePoint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_BasePoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BasePoint", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xf7bd60b, 0xccdcbe8, 0x89368e1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__12, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xf7bd60b, 0xccdcbe8, 0x89368e1):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 *     __pyx_result = BasePoint.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xf7bd60b, 0xccdcbe8, 0x89368e1):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = BasePoint.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xf7bd60b, 0xccdcbe8, 0x89368e1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 *     __pyx_result = BasePoint.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint), __pyx_n_s_new_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 *     __pyx_result = BasePoint.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = BasePoint.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint__set_state(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 *     __pyx_result = BasePoint.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):
 *     __pyx_result.size = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BasePoint(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_BasePoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_BasePoint__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BasePoint__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):
 *     __pyx_result.size = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->size = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_BasePoint__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ImageItem(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_3__pyx_unpickle_ImageItem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_3__pyx_unpickle_ImageItem = {"__pyx_unpickle_ImageItem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_3__pyx_unpickle_ImageItem, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_3__pyx_unpickle_ImageItem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageItem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageItem", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageItem", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ImageItem") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageItem", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageItem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_2__pyx_unpickle_ImageItem(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_2__pyx_unpickle_ImageItem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageItem", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x567fd72, 0x66cf970, 0xf701f99):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__13, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x567fd72, 0x66cf970, 0xf701f99):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = ImageItem.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x567fd72, 0x66cf970, 0xf701f99):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ImageItem.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x567fd72, 0x66cf970, 0xf701f99):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = ImageItem.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem), __pyx_n_s_new_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = ImageItem.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ImageItem.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageItem__set_state(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x567fd72, 0x66cf970, 0xf701f99) = (actionX, actionY, alpha, checksum, flags, graphicMode, handle, height, image, indexed, parent, pos, reader, references, settings, transparent, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = ImageItem.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImageItem(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageItem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageItem__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  short __pyx_t_2;
  int __pyx_t_3;
  char __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageItem__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[19])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->actionX = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->actionY = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->alpha);
  __Pyx_DECREF(__pyx_v___pyx_result->alpha);
  __pyx_v___pyx_result->alpha = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->checksum = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->flags);
  __Pyx_DECREF(__pyx_v___pyx_result->flags);
  __pyx_v___pyx_result->flags = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_char(__pyx_t_1); if (unlikely((__pyx_t_4 == (char)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->graphicMode = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->handle = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->height = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->image);
  __Pyx_DECREF(__pyx_v___pyx_result->image);
  __pyx_v___pyx_result->image = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->indexed = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_6loader_DataLoader))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.parent);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.parent));
  __pyx_v___pyx_result->__pyx_base.parent = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->pos = __pyx_t_6;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->reader);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->reader));
  __pyx_v___pyx_result->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->references = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.settings);
  __pyx_v___pyx_result->__pyx_base.settings = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->transparent);
  __Pyx_DECREF(__pyx_v___pyx_result->transparent);
  __pyx_v___pyx_result->transparent = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->width = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->xHotspot = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->yHotspot = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[19])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_7 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = ((__pyx_t_7 > 19) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_5 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_8 != 0);
  __pyx_t_5 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[19])             # <<<<<<<<<<<<<<
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_update); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[19])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImageItem__set_state(<ImageItem> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageItem__set_state(ImageItem __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.alpha = __pyx_state[2]; __pyx_result.checksum = __pyx_state[3]; __pyx_result.flags = __pyx_state[4]; __pyx_result.graphicMode = __pyx_state[5]; __pyx_result.handle = __pyx_state[6]; __pyx_result.height = __pyx_state[7]; __pyx_result.image = __pyx_state[8]; __pyx_result.indexed = __pyx_state[9]; __pyx_result.parent = __pyx_state[10]; __pyx_result.pos = __pyx_state[11]; __pyx_result.reader = __pyx_state[12]; __pyx_result.references = __pyx_state[13]; __pyx_result.settings = __pyx_state[14]; __pyx_result.transparent = __pyx_state[15]; __pyx_result.width = __pyx_state[16]; __pyx_result.xHotspot = __pyx_state[17]; __pyx_result.yHotspot = __pyx_state[18]
 *     if len(__pyx_state) > 19 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageItem__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_JavaImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5__pyx_unpickle_JavaImage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_5__pyx_unpickle_JavaImage = {"__pyx_unpickle_JavaImage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5__pyx_unpickle_JavaImage, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5__pyx_unpickle_JavaImage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_JavaImage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_JavaImage", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_JavaImage", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_JavaImage") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_JavaImage", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_JavaImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_4__pyx_unpickle_JavaImage(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_4__pyx_unpickle_JavaImage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_JavaImage", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x35489f1, 0x7e7d341, 0x282305e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x35489f1, 0x7e7d341, 0x282305e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = JavaImage.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x35489f1, 0x7e7d341, 0x282305e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = JavaImage.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x35489f1, 0x7e7d341, 0x282305e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = JavaImage.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage), __pyx_n_s_new_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = JavaImage.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = JavaImage.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_JavaImage__set_state(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x35489f1, 0x7e7d341, 0x282305e) = (actionX, actionY, data, flash, handle, height, parent, settings, width, xHotspot, yHotspot))" % __pyx_checksum)
 *     __pyx_result = JavaImage.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_JavaImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_JavaImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_JavaImage__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_JavaImage__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->actionX = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->actionY = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->data);
  __Pyx_DECREF(__pyx_v___pyx_result->data);
  __pyx_v___pyx_result->data = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->flash = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->handle = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->height = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_6loader_DataLoader))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.parent);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.parent));
  __pyx_v___pyx_result->__pyx_base.parent = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.settings);
  __pyx_v___pyx_result->__pyx_base.settings = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->width = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->xHotspot = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->yHotspot = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 11) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_JavaImage__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ImageBank(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_7__pyx_unpickle_ImageBank(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_7__pyx_unpickle_ImageBank = {"__pyx_unpickle_ImageBank", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_7__pyx_unpickle_ImageBank, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_7__pyx_unpickle_ImageBank(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageBank (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageBank", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageBank", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ImageBank") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageBank", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageBank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_6__pyx_unpickle_ImageBank(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_9imagebank_6__pyx_unpickle_ImageBank(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageBank", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9324642, 0x6f3f23c, 0x49cbaf0):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__15, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9324642, 0x6f3f23c, 0x49cbaf0):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 *     __pyx_result = ImageBank.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x9324642, 0x6f3f23c, 0x49cbaf0):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ImageBank.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9324642, 0x6f3f23c, 0x49cbaf0):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 *     __pyx_result = ImageBank.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank), __pyx_n_s_new_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 *     __pyx_result = ImageBank.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ImageBank.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageBank__set_state(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9324642, 0x6f3f23c, 0x49cbaf0) = (itemDict, parent, settings))" % __pyx_checksum)
 *     __pyx_result = ImageBank.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImageBank(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageBank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank___pyx_unpickle_ImageBank__set_state(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageBank__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->itemDict);
  __Pyx_DECREF(__pyx_v___pyx_result->itemDict);
  __pyx_v___pyx_result->itemDict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_6loader_DataLoader))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.parent);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.parent));
  __pyx_v___pyx_result->__pyx_base.parent = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.settings);
  __pyx_v___pyx_result->__pyx_base.settings = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 3) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImageBank__set_state(<ImageBank> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageBank__set_state(ImageBank __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.itemDict = __pyx_state[0]; __pyx_result.parent = __pyx_state[1]; __pyx_result.settings = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.imagebank.__pyx_unpickle_ImageBank__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser/common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int __pyx_v_size, char **__pyx_v_i) {
  PyObject *__pyx_v_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allocate_memory", 0);

  /* "mmfparser/common.pxd":24
 * 
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:             # <<<<<<<<<<<<<<
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 */
  __pyx_t_1 = ((__pyx_v_size < 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser/common.pxd":25
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:
 *         size = 0             # <<<<<<<<<<<<<<
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 */
    __pyx_v_size = 0;

    /* "mmfparser/common.pxd":24
 * 
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:             # <<<<<<<<<<<<<<
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 */
  }

  /* "mmfparser/common.pxd":26
 *     if size < 0:
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)             # <<<<<<<<<<<<<<
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob
 */
  __pyx_t_2 = PyString_FromStringAndSize(NULL, __pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ob = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser/common.pxd":27
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)             # <<<<<<<<<<<<<<
 *     return ob
 */
  (__pyx_v_i[0]) = PyString_AS_STRING(__pyx_v_ob);

  /* "mmfparser/common.pxd":28
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ob);
  __pyx_r = __pyx_v_ob;
  goto __pyx_L0;

  /* "mmfparser/common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.common.allocate_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;
  p->flags = Py_None; Py_INCREF(Py_None);
  p->image = Py_None; Py_INCREF(Py_None);
  p->alpha = Py_None; Py_INCREF(Py_None);
  p->transparent = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->flags);
  Py_CLEAR(p->image);
  Py_CLEAR(p->alpha);
  Py_CLEAR(p->transparent);
  Py_CLEAR(p->reader);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)o;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem)); if (e) return e;
  if (p->flags) {
    e = (*v)(p->flags, a); if (e) return e;
  }
  if (p->image) {
    e = (*v)(p->image, a); if (e) return e;
  }
  if (p->alpha) {
    e = (*v)(p->alpha, a); if (e) return e;
  }
  if (p->transparent) {
    e = (*v)(p->transparent, a); if (e) return e;
  }
  if (p->reader) {
    e = (*v)(((PyObject *)p->reader), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *)o;
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem);
  tmp = ((PyObject*)p->flags);
  p->flags = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->image);
  p->image = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->alpha);
  p->alpha = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->transparent);
  p->transparent = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reader);
  p->reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_handle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6handle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_checksum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_checksum(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8checksum_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_references(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_references(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_10references_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_xHotspot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_xHotspot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8xHotspot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_yHotspot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_yHotspot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_8yHotspot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7actionY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5flags_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_image(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_image(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5image_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_alpha(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5alpha_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_indexed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_indexed(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7indexed_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_graphicMode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_graphicMode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11graphicMode_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_transparent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_transparent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11transparent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_reader(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_reader(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_6reader_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem[] = {
  {"initialize", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_1initialize, METH_NOARGS, 0},
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_3read, METH_O, 0},
  {"load", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_5load, METH_NOARGS, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_7write, METH_O, 0},
  {"createDisplay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_9createDisplay, METH_VARARGS|METH_KEYWORDS, 0},
  {"getImageData", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_11getImageData, METH_VARARGS|METH_KEYWORDS, 0},
  {"unload", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_13unload, METH_NOARGS, 0},
  {"getGraphicMode", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_15getGraphicMode, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem[] = {
  {(char *)"handle", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_handle, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_handle, (char *)0, 0},
  {(char *)"checksum", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_checksum, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_checksum, (char *)0, 0},
  {(char *)"references", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_references, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_references, (char *)0, 0},
  {(char *)"width", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_width, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_width, (char *)0, 0},
  {(char *)"height", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_height, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_height, (char *)0, 0},
  {(char *)"xHotspot", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_xHotspot, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_xHotspot, (char *)0, 0},
  {(char *)"yHotspot", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_yHotspot, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_yHotspot, (char *)0, 0},
  {(char *)"actionX", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionX, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionX, (char *)0, 0},
  {(char *)"actionY", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionY, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_actionY, (char *)0, 0},
  {(char *)"flags", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_flags, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_flags, (char *)0, 0},
  {(char *)"image", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_image, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_image, (char *)0, 0},
  {(char *)"alpha", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_alpha, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_alpha, (char *)0, 0},
  {(char *)"indexed", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_indexed, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_indexed, (char *)0, 0},
  {(char *)"graphicMode", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_graphicMode, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_graphicMode, (char *)0, 0},
  {(char *)"transparent", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_transparent, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_transparent, (char *)0, 0},
  {(char *)"reader", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_reader, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_reader, (char *)0, 0},
  {(char *)"pos", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_pos, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_pos, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.ImageItem", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)o);
  p->__pyx_vtab = __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint[] = {
  {(char *)"size", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_size, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_size, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.BasePoint", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_Point __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_Point;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_Point(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *p;
  PyObject *o = __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_Point;
  if (unlikely(__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_Point[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_5Point_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.Point", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_Point, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_Point, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *p;
  PyObject *o = __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;
  if (unlikely(__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.SixteenPoint", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *p;
  PyObject *o = __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;
  if (unlikely(__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.FifteenPoint", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *p;
  PyObject *o = __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;
  if (unlikely(__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.IndexPoint", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;
  p->data = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->data);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)o;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage)); if (e) return e;
  if (p->data) {
    e = (*v)(p->data, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage *)o;
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage);
  tmp = ((PyObject*)p->data);
  p->data = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_handle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6handle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_xHotspot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_xHotspot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8xHotspot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_yHotspot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_yHotspot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_8yHotspot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7actionY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_4data_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_flash(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_flash(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5flash_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_3write, METH_O, 0},
  {"createDisplay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_5createDisplay, METH_VARARGS|METH_KEYWORDS, 0},
  {"getImageData", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_7getImageData, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage[] = {
  {(char *)"handle", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_handle, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_handle, (char *)0, 0},
  {(char *)"xHotspot", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_xHotspot, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_xHotspot, (char *)0, 0},
  {(char *)"yHotspot", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_yHotspot, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_yHotspot, (char *)0, 0},
  {(char *)"actionX", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionX, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionX, (char *)0, 0},
  {(char *)"actionY", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionY, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_actionY, (char *)0, 0},
  {(char *)"width", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_width, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_width, (char *)0, 0},
  {(char *)"height", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_height, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_height, (char *)0, 0},
  {(char *)"data", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_data, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_data, (char *)0, 0},
  {(char *)"flash", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_flash, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_flash, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.JavaImage", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;
  p->itemDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->itemDict);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)o;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank)); if (e) return e;
  if (p->itemDict) {
    e = (*v)(p->itemDict, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank *)o;
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank);
  tmp = ((PyObject*)p->itemDict);
  p->itemDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_items(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5items_1__get__(o);
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_itemDict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_itemDict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_8itemDict_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank[] = {
  {"initialize", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_1initialize, METH_NOARGS, 0},
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_3read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_5write, METH_O, 0},
  {"fromHandle", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_7fromHandle, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank[] = {
  {(char *)"items", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_items, 0, (char *)0, 0},
  {(char *)"itemDict", __pyx_getprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_itemDict, __pyx_setprop_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_itemDict, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.imagebank.ImageBank", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_imagebank(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_imagebank},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "imagebank",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ACE, __pyx_k_ACE, sizeof(__pyx_k_ACE), 0, 0, 1, 1},
  {&__pyx_n_s_AGMIBank, __pyx_k_AGMIBank, sizeof(__pyx_k_AGMIBank), 0, 0, 1, 1},
  {&__pyx_n_s_ARGB, __pyx_k_ARGB, sizeof(__pyx_k_ARGB), 0, 0, 1, 1},
  {&__pyx_n_s_Alpha, __pyx_k_Alpha, sizeof(__pyx_k_Alpha), 0, 0, 1, 1},
  {&__pyx_n_s_BasePoint, __pyx_k_BasePoint, sizeof(__pyx_k_BasePoint), 0, 0, 1, 1},
  {&__pyx_n_s_BitDict, __pyx_k_BitDict, sizeof(__pyx_k_BitDict), 0, 0, 1, 1},
  {&__pyx_n_s_FifteenPoint, __pyx_k_FifteenPoint, sizeof(__pyx_k_FifteenPoint), 0, 0, 1, 1},
  {&__pyx_n_s_IMAGE_FLAGS, __pyx_k_IMAGE_FLAGS, sizeof(__pyx_k_IMAGE_FLAGS), 0, 0, 1, 1},
  {&__pyx_n_s_Image, __pyx_k_Image, sizeof(__pyx_k_Image), 0, 0, 1, 1},
  {&__pyx_n_s_ImageBank, __pyx_k_ImageBank, sizeof(__pyx_k_ImageBank), 0, 0, 1, 1},
  {&__pyx_n_s_ImageData, __pyx_k_ImageData, sizeof(__pyx_k_ImageData), 0, 0, 1, 1},
  {&__pyx_n_s_ImageItem, __pyx_k_ImageItem, sizeof(__pyx_k_ImageItem), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_k_Incompatible_checksums_0x_x_vs_0_4, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_4), 0, 0, 1, 0},
  {&__pyx_n_s_IndexPoint, __pyx_k_IndexPoint, sizeof(__pyx_k_IndexPoint), 0, 0, 1, 1},
  {&__pyx_n_s_JavaImage, __pyx_k_JavaImage, sizeof(__pyx_k_JavaImage), 0, 0, 1, 1},
  {&__pyx_n_s_LZX, __pyx_k_LZX, sizeof(__pyx_k_LZX), 0, 0, 1, 1},
  {&__pyx_n_s_Mac, __pyx_k_Mac, sizeof(__pyx_k_Mac), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Point, __pyx_k_Point, sizeof(__pyx_k_Point), 0, 0, 1, 1},
  {&__pyx_n_s_RGBA, __pyx_k_RGBA, sizeof(__pyx_k_RGBA), 0, 0, 1, 1},
  {&__pyx_n_s_RLE, __pyx_k_RLE, sizeof(__pyx_k_RLE), 0, 0, 1, 1},
  {&__pyx_n_s_RLET, __pyx_k_RLET, sizeof(__pyx_k_RLET), 0, 0, 1, 1},
  {&__pyx_n_s_RLEW, __pyx_k_RLEW, sizeof(__pyx_k_RLEW), 0, 0, 1, 1},
  {&__pyx_n_s_SixteenPoint, __pyx_k_SixteenPoint, sizeof(__pyx_k_SixteenPoint), 0, 0, 1, 1},
  {&__pyx_n_s_StringIO, __pyx_k_StringIO, sizeof(__pyx_k_StringIO), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Writing_Texture_to_MFA_s, __pyx_k_Writing_Texture_to_MFA_s, sizeof(__pyx_k_Writing_Texture_to_MFA_s), 0, 0, 1, 0},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alphaSize, __pyx_k_alphaSize, sizeof(__pyx_k_alphaSize), 0, 0, 1, 1},
  {&__pyx_n_s_anchor_x, __pyx_k_anchor_x, sizeof(__pyx_k_anchor_x), 0, 0, 1, 1},
  {&__pyx_n_s_anchor_y, __pyx_k_anchor_y, sizeof(__pyx_k_anchor_y), 0, 0, 1, 1},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_n_s_bytesRead, __pyx_k_bytesRead, sizeof(__pyx_k_bytesRead), 0, 0, 1, 1},
  {&__pyx_n_s_cStringIO, __pyx_k_cStringIO, sizeof(__pyx_k_cStringIO), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_code, __pyx_k_code, sizeof(__pyx_k_code), 0, 0, 1, 1},
  {&__pyx_n_s_compress, __pyx_k_compress, sizeof(__pyx_k_compress), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_decompress, __pyx_k_decompress, sizeof(__pyx_k_decompress), 0, 0, 1, 1},
  {&__pyx_n_s_decompressed, __pyx_k_decompressed, sizeof(__pyx_k_decompressed), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_data, __pyx_k_get_data, sizeof(__pyx_k_get_data), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_graphicModes, __pyx_k_graphicModes, sizeof(__pyx_k_graphicModes), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_imageSize, __pyx_k_imageSize, sizeof(__pyx_k_imageSize), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_interact, __pyx_k_interact, sizeof(__pyx_k_interact), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_java, __pyx_k_java, sizeof(__pyx_k_java), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_loadImages, __pyx_k_loadImages, sizeof(__pyx_k_loadImages), 0, 0, 1, 1},
  {&__pyx_n_s_load_image, __pyx_k_load_image, sizeof(__pyx_k_load_image), 0, 0, 1, 1},
  {&__pyx_n_s_local, __pyx_k_local, sizeof(__pyx_k_local), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_bitdict, __pyx_k_mmfparser_bitdict, sizeof(__pyx_k_mmfparser_bitdict), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data, __pyx_k_mmfparser_data, sizeof(__pyx_k_mmfparser_data), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders_apph, __pyx_k_mmfparser_data_chunkloaders_apph, sizeof(__pyx_k_mmfparser_data_chunkloaders_apph), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders_imag, __pyx_k_mmfparser_data_chunkloaders_imag, sizeof(__pyx_k_mmfparser_data_chunkloaders_imag), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_mfaloaders_imageb, __pyx_k_mmfparser_data_mfaloaders_imageb, sizeof(__pyx_k_mmfparser_data_mfaloaders_imageb), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_image, __pyx_k_mmfparser_image, sizeof(__pyx_k_mmfparser_image), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_player_common, __pyx_k_mmfparser_player_common, sizeof(__pyx_k_mmfparser_player_common), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_player_sprite, __pyx_k_mmfparser_player_sprite, sizeof(__pyx_k_mmfparser_player_sprite), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newReader, __pyx_k_newReader, sizeof(__pyx_k_newReader), 0, 0, 1, 1},
  {&__pyx_n_s_new_2, __pyx_k_new_2, sizeof(__pyx_k_new_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_s_not_supported, __pyx_k_not_supported, sizeof(__pyx_k_not_supported), 0, 0, 1, 0},
  {&__pyx_n_s_offsets, __pyx_k_offsets, sizeof(__pyx_k_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_old, __pyx_k_old, sizeof(__pyx_k_old), 0, 0, 1, 1},
  {&__pyx_n_s_onepointfive, __pyx_k_onepointfive, sizeof(__pyx_k_onepointfive), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_openEditor, __pyx_k_openEditor, sizeof(__pyx_k_openEditor), 0, 0, 1, 1},
  {&__pyx_n_s_pad, __pyx_k_pad, sizeof(__pyx_k_pad), 0, 0, 1, 1},
  {&__pyx_n_s_palette, __pyx_k_palette, sizeof(__pyx_k_palette), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pointClass, __pyx_k_pointClass, sizeof(__pyx_k_pointClass), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BasePoint, __pyx_k_pyx_unpickle_BasePoint, sizeof(__pyx_k_pyx_unpickle_BasePoint), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ImageBank, __pyx_k_pyx_unpickle_ImageBank, sizeof(__pyx_k_pyx_unpickle_ImageBank), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ImageItem, __pyx_k_pyx_unpickle_ImageItem, sizeof(__pyx_k_pyx_unpickle_ImageItem), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_JavaImage, __pyx_k_pyx_unpickle_JavaImage, sizeof(__pyx_k_pyx_unpickle_JavaImage), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
  {&__pyx_n_s_readerData, __pyx_k_readerData, sizeof(__pyx_k_readerData), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setFlags, __pyx_k_setFlags, sizeof(__pyx_k_setFlags), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_tell, __pyx_k_tell, sizeof(__pyx_k_tell), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_unknown_graphic_mode_s, __pyx_k_unknown_graphic_mode_s, sizeof(__pyx_k_unknown_graphic_mode_s), 0, 0, 1, 0},
  {&__pyx_n_s_unload, __pyx_k_unload, sizeof(__pyx_k_unload), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_withSize, __pyx_k_withSize, sizeof(__pyx_k_withSize), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeByte, __pyx_k_writeByte, sizeof(__pyx_k_writeByte), 0, 0, 1, 1},
  {&__pyx_n_s_writeColor, __pyx_k_writeColor, sizeof(__pyx_k_writeColor), 0, 0, 1, 1},
  {&__pyx_n_s_writeInt, __pyx_k_writeInt, sizeof(__pyx_k_writeInt), 0, 0, 1, 1},
  {&__pyx_n_s_writeReader, __pyx_k_writeReader, sizeof(__pyx_k_writeReader), 0, 0, 1, 1},
  {&__pyx_n_s_writeShort, __pyx_k_writeShort, sizeof(__pyx_k_writeShort), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zlib, __pyx_k_zlib, sizeof(__pyx_k_zlib), 0, 0, 1, 1},
  {&__pyx_n_s_zlibdata, __pyx_k_zlibdata, sizeof(__pyx_k_zlibdata), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 605, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 626, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 626, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":376
 *         cdef bint old = self.settings.get('old', False)
 *         if old:
 *             raise NotImplementedError('not supported')             # <<<<<<<<<<<<<<
 * 
 *         cdef bint debug = self.settings.get('debug', False)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_not_supported); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":429
 *         self.actionY = newReader.readShort()
 *         if old:
 *             self.transparent = (0, 0, 0)             # <<<<<<<<<<<<<<
 *         else:
 *             self.transparent = newReader.readColor()
 */
  __pyx_tuple__10 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xf7bd60b, 0xccdcbe8, 0x89368e1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xf7bd60b, 0xccdcbe8, 0x89368e1) = (size))" % __pyx_checksum)
 */
  __pyx_tuple__12 = PyTuple_Pack(3, __pyx_int_259773963, __pyx_int_214813672, __pyx_int_143878369); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(3, __pyx_int_90701170, __pyx_int_107805040, __pyx_int_259006361); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_int_55871985, __pyx_int_132633409, __pyx_int_42086494); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_int_154289730, __pyx_int_116650556, __pyx_int_77380336); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "mmfparser/data/chunkloaders/imagebank.pyx":331
 *     # return data
 * 
 * IMAGE_FLAGS = BitDict(             # <<<<<<<<<<<<<<
 *     'RLE',
 *     'RLEW',
 */
  __pyx_tuple__16 = PyTuple_Pack(7, __pyx_n_s_RLE, __pyx_n_s_RLEW, __pyx_n_s_RLET, __pyx_n_s_LZX, __pyx_n_s_Alpha, __pyx_n_s_ACE, __pyx_n_s_Mac); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":1
 * def __pyx_unpickle_BasePoint(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__17 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BasePoint, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__19 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ImageItem, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__21 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_JavaImage, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__23 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ImageBank, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_42086494 = PyInt_FromLong(42086494L); if (unlikely(!__pyx_int_42086494)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_55871985 = PyInt_FromLong(55871985L); if (unlikely(!__pyx_int_55871985)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77380336 = PyInt_FromLong(77380336L); if (unlikely(!__pyx_int_77380336)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90701170 = PyInt_FromLong(90701170L); if (unlikely(!__pyx_int_90701170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_107805040 = PyInt_FromLong(107805040L); if (unlikely(!__pyx_int_107805040)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_116650556 = PyInt_FromLong(116650556L); if (unlikely(!__pyx_int_116650556)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_132633409 = PyInt_FromLong(132633409L); if (unlikely(!__pyx_int_132633409)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_143878369 = PyInt_FromLong(143878369L); if (unlikely(!__pyx_int_143878369)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_154289730 = PyInt_FromLong(154289730L); if (unlikely(!__pyx_int_154289730)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_214813672 = PyInt_FromLong(214813672L); if (unlikely(!__pyx_int_214813672)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_259006361 = PyInt_FromLong(259006361L); if (unlikely(!__pyx_int_259006361)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_259773963 = PyInt_FromLong(259773963L); if (unlikely(!__pyx_int_259773963)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)Py_None); Py_INCREF(Py_None);
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)Py_None); Py_INCREF(Py_None);
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)Py_None); Py_INCREF(Py_None);
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("mmfparser.loader"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9mmfparser_6loader_DataLoader = __Pyx_ImportType_0_29_35(__pyx_t_1, "mmfparser.loader", "DataLoader", sizeof(struct __pyx_obj_9mmfparser_6loader_DataLoader), __PYX_GET_STRUCT_ALIGNMENT_0_29_35(struct __pyx_obj_9mmfparser_6loader_DataLoader),__Pyx_ImportType_CheckSize_Warn_0_29_35); if (!__pyx_ptype_9mmfparser_6loader_DataLoader) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_9mmfparser_6loader_DataLoader = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_6loader_DataLoader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_6loader_DataLoader)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.__pyx_base.initialize = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_initialize;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.load = (PyObject *(*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageItem_load;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImageItem, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageItem;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.read = (unsigned int (*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9BasePoint_read;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BasePoint, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_Point = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_Point;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_Point.__pyx_base = *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_Point.__pyx_base.read = (unsigned int (*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_Point.write = (PyObject *(*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_Point *, PyObject *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_5Point_write;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_base = __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_Point) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Point, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_Point = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_Point;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.__pyx_base = *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.__pyx_base.read = (unsigned int (*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.write = (PyObject *(*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12SixteenPoint_write;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_base = __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SixteenPoint, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.__pyx_base = *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.__pyx_base.read = (unsigned int (*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.write = (PyObject *(*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_12FifteenPoint_write;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_base = __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FifteenPoint, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.__pyx_base = *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.__pyx_base.read = (unsigned int (*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *, char *, int))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.write = (PyObject *(*)(struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *, PyObject *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_10IndexPoint_write;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_base = __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IndexPoint, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9JavaImage_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_JavaImage, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_JavaImage;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank = &__pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_read;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.__pyx_base.initialize = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_9imagebank_9ImageBank_initialize;
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_dictoffset && __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImageBank, (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank = &__pyx_type_9mmfparser_4data_12chunkloaders_9imagebank_ImageBank;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("mmfparser.bytereader"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9mmfparser_10bytereader_ByteReader = __Pyx_ImportType_0_29_35(__pyx_t_1, "mmfparser.bytereader", "ByteReader", sizeof(struct __pyx_obj_9mmfparser_10bytereader_ByteReader), __PYX_GET_STRUCT_ALIGNMENT_0_29_35(struct __pyx_obj_9mmfparser_10bytereader_ByteReader),__Pyx_ImportType_CheckSize_Warn_0_29_35); if (!__pyx_ptype_9mmfparser_10bytereader_ByteReader) __PYX_ERR(3, 20, __pyx_L1_error)
  __pyx_vtabptr_9mmfparser_10bytereader_ByteReader = (struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_10bytereader_ByteReader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_10bytereader_ByteReader)) __PYX_ERR(3, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initimagebank(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initimagebank(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_imagebank(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_imagebank(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_imagebank(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'imagebank' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_imagebank(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("imagebank", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mmfparser__data__chunkloaders__imagebank) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mmfparser.data.chunkloaders.imagebank")) {
      if (unlikely(PyDict_SetItemString(modules, "mmfparser.data.chunkloaders.imagebank", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mmfparser/data/chunkloaders/imagebank.pyx":20
 * cimport cython
 * 
 * import struct             # <<<<<<<<<<<<<<
 * import zlib
 * from cStringIO import StringIO
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":21
 * 
 * import struct
 * import zlib             # <<<<<<<<<<<<<<
 * from cStringIO import StringIO
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_zlib, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zlib, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":22
 * import struct
 * import zlib
 * from cStringIO import StringIO             # <<<<<<<<<<<<<<
 * 
 * from mmfparser.bytereader cimport ByteReader
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_StringIO);
  __Pyx_GIVEREF(__pyx_n_s_StringIO);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_StringIO);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cStringIO, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_StringIO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StringIO, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":25
 * 
 * from mmfparser.bytereader cimport ByteReader
 * from mmfparser.data import zlibdata             # <<<<<<<<<<<<<<
 * from mmfparser.data import onepointfive
 * from mmfparser.loader cimport DataLoader
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_zlibdata);
  __Pyx_GIVEREF(__pyx_n_s_zlibdata);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_zlibdata);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_mmfparser_data, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zlibdata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zlibdata, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":26
 * from mmfparser.bytereader cimport ByteReader
 * from mmfparser.data import zlibdata
 * from mmfparser.data import onepointfive             # <<<<<<<<<<<<<<
 * from mmfparser.loader cimport DataLoader
 * from mmfparser.data.chunkloaders.appheader import graphicModes
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_onepointfive);
  __Pyx_GIVEREF(__pyx_n_s_onepointfive);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_onepointfive);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_data, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_onepointfive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_onepointfive, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":28
 * from mmfparser.data import onepointfive
 * from mmfparser.loader cimport DataLoader
 * from mmfparser.data.chunkloaders.appheader import graphicModes             # <<<<<<<<<<<<<<
 * from mmfparser.common cimport allocate_memory
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_graphicModes);
  __Pyx_GIVEREF(__pyx_n_s_graphicModes);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_graphicModes);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_mmfparser_data_chunkloaders_apph, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_graphicModes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graphicModes, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":31
 * from mmfparser.common cimport allocate_memory
 * 
 * from mmfparser.bitdict import BitDict             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "math.h":
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BitDict);
  __Pyx_GIVEREF(__pyx_n_s_BitDict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BitDict);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_bitdict, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BitDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BitDict, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":36
 *     double ceil(double ceil)
 * 
 * cdef int POINT_MODE = 4 # 16 million colors             # <<<<<<<<<<<<<<
 * cdef int FIFTEENPOINT_MODE = 6  # 32768 colors
 * 
 */
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_POINT_MODE = 4;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":37
 * 
 * cdef int POINT_MODE = 4 # 16 million colors
 * cdef int FIFTEENPOINT_MODE = 6  # 32768 colors             # <<<<<<<<<<<<<<
 * 
 * cdef class ImageItem
 */
  __pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_FIFTEENPOINT_MODE = 6;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":124
 *         reader.writeByte(item[0], True)
 * 
 * cdef BasePoint point_instance = Point()             # <<<<<<<<<<<<<<
 * 
 * cdef class SixteenPoint(BasePoint):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_Point)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance));
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_point_instance, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":152
 *         return r | g | b
 * 
 * cdef BasePoint sixteen_point = SixteenPoint()             # <<<<<<<<<<<<<<
 * 
 * cdef class FifteenPoint(BasePoint):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_SixteenPoint)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point));
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_sixteen_point, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":181
 *         return r | g | b
 * 
 * cdef BasePoint fifteen_point = FifteenPoint()             # <<<<<<<<<<<<<<
 * 
 * cdef class IndexPoint(BasePoint):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_FifteenPoint)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point));
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_fifteen_point, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_BasePoint *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":193
 *         reader.writeByte(point, True)
 * 
 * cdef IndexPoint index_point = IndexPoint()             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple read_rgb(char * data, int width, int height, BasePoint pointClass):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point));
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_12chunkloaders_9imagebank_index_point, ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_9imagebank_IndexPoint *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":331
 *     # return data
 * 
 * IMAGE_FLAGS = BitDict(             # <<<<<<<<<<<<<<
 *     'RLE',
 *     'RLEW',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BitDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMAGE_FLAGS, __pyx_t_1) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":656
 *         return self.itemDict[handle]
 * 
 * from mmfparser.data.mfaloaders.imagebank import AGMIBank             # <<<<<<<<<<<<<<
 * 
 * __all__ = ['ImageBank', 'JavaImage', 'ImageItem']
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AGMIBank);
  __Pyx_GIVEREF(__pyx_n_s_AGMIBank);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AGMIBank);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_data_mfaloaders_imageb, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AGMIBank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AGMIBank, __pyx_t_1) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":658
 * from mmfparser.data.mfaloaders.imagebank import AGMIBank
 * 
 * __all__ = ['ImageBank', 'JavaImage', 'ImageItem']             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ImageBank);
  __Pyx_GIVEREF(__pyx_n_s_ImageBank);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ImageBank);
  __Pyx_INCREF(__pyx_n_s_JavaImage);
  __Pyx_GIVEREF(__pyx_n_s_JavaImage);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_JavaImage);
  __Pyx_INCREF(__pyx_n_s_ImageItem);
  __Pyx_GIVEREF(__pyx_n_s_ImageItem);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_ImageItem);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_2) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BasePoint(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_1__pyx_unpickle_BasePoint, NULL, __pyx_n_s_mmfparser_data_chunkloaders_imag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BasePoint, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BasePoint__set_state(<BasePoint> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BasePoint__set_state(BasePoint __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.size = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_3__pyx_unpickle_ImageItem, NULL, __pyx_n_s_mmfparser_data_chunkloaders_imag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ImageItem, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_JavaImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_5__pyx_unpickle_JavaImage, NULL, __pyx_n_s_mmfparser_data_chunkloaders_imag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_JavaImage, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_JavaImage__set_state(<JavaImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_JavaImage__set_state(JavaImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.actionX = __pyx_state[0]; __pyx_result.actionY = __pyx_state[1]; __pyx_result.data = __pyx_state[2]; __pyx_result.flash = __pyx_state[3]; __pyx_result.handle = __pyx_state[4]; __pyx_result.height = __pyx_state[5]; __pyx_result.parent = __pyx_state[6]; __pyx_result.settings = __pyx_state[7]; __pyx_result.width = __pyx_state[8]; __pyx_result.xHotspot = __pyx_state[9]; __pyx_result.yHotspot = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_4data_12chunkloaders_9imagebank_7__pyx_unpickle_ImageBank, NULL, __pyx_n_s_mmfparser_data_chunkloaders_imag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ImageBank, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/data/chunkloaders/imagebank.pyx":1
 * # Copyright (c) Mathias Kaerlev 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of Anaconda.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser/common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmfparser.data.chunkloaders.imagebank", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmfparser.data.chunkloaders.imagebank");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_LshiftObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            if (likely(b < (long) (sizeof(long)*8) && a == (a << b) >> b) || !a) {
                return PyInt_FromLong(a << b);
            }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_lshift(op1, op2);
            }
        }
                x = a << b;
#ifdef HAVE_LONG_LONG
                if (unlikely(!(b < (long) (sizeof(long)*8) && a == x >> b)) && a) {
                    lla = a;
                    goto long_long;
                }
#else
                if (likely(b < (long) (sizeof(long)*8) && a == x >> b) || !a)
#endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla << llb;
                if (likely(lla == llx >> llb))
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceLshift : PyNumber_Lshift)(op1, op2);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a >> b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_rshift(op1, op2);
            }
        }
                x = a >> b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla >> llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRshift : PyNumber_Rshift)(op1, op2);
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_0_29_35
#define __PYX_HAVE_RT_ImportType_0_29_35
static PyTypeObject *__Pyx_ImportType_0_29_35(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_35 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_35 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_35 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ToPyCTupleUtility */
static PyObject* __pyx_convert__to_py___pyx_ctuple_long__and_long__and_long(__pyx_ctuple_long__and_long__and_long value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(3);
    if (!result) goto bad;
        item = __Pyx_PyInt_From_long(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = __Pyx_PyInt_From_long(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
        item = __Pyx_PyInt_From_long(value.f2);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 2, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, digits[0])
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 2 * PyLong_SHIFT) {
                            return (short) (((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 3 * PyLong_SHIFT) {
                            return (short) (((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 4 * PyLong_SHIFT) {
                            return (short) (((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) ((((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) ((((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) ((((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
